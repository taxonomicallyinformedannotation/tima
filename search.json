[{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tima","title":"Contributing to tima","text":"outlines propose change tima. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tima","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tima","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tima","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"taxonomicallyinformedannotation/tima-r\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tima","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tima","text":"Please note tima project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SECURITY.html","id":"supported-versions","dir":"","previous_headings":"","what":"Supported Versions","title":"Security Policy","text":"supported versions can found detail releases.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"identified vulnerability, please open issue without giving details. connect offline discuss specifics.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with tima","title":"Getting help with tima","text":"Thanks using tima! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with tima","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with tima","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with tima","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically, don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"1 Gathering everything you need","text":"steps require parameters. default parameters available can accessed params/default directory. prefer accessing GUI, can . parameter contains small help menu, can click , illustrated .   example, want output compatible Cytoscape, multiple annotations per features:  parameters saved reported end analysis.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"1 Gathering everything you need","text":"provide files main menu. tutorial, use example files can get running: following paragraph describes libraries available default. first step, need spectral libraries perform MS2-based annotation. can course use experimental spectral library perform MS2 annotation. currently support spectral libraries MSP MGF format. get small example: MassBank downloaded used default. currently working get MONA GNPS experimental spectra easily available. However, programmatic download MONA currently supported, GNPS spectra require pre-processing. now, either use GNPS job ID download MONA manually, helpers use later already available. (see scripts/prepare_libraries_spectra_exp_mona.R). case want format spectral library use spectral matching, adapt steps params/user/prepare_libraries_spectra.yaml params/user/annotate_spectra.yaml. availability experimental spectra limited, can take advantage silico generated spectra. generated silico spectral library structures found Wikidata using CFM4. info, see https://doi.org/10.5281/zenodo.5607185. made available polarities. can also complement silico spectra HMDB (running default quite long): library optional. standard LC method shared (now) among laboratories, library heavily laboratory-dependent. also library silico predicted retention times. want prepare library, look params/user/prepare_libraries_rt.yaml. developed LOTUS1 Taxonomically Informed Metabolite Annotation mind, provide starting point structure-organism pairs library. process download LOTUS looks like : can see, one target seems outdated. reality, force search new version LOTUS exists time. newer version exists, fetch re-run needed steps accordingly. default, also complement LOTUS pairs ones coming ECMDB. ones coming HMDB. first steps, need change parameters implemented default. want tool flexible, can also add library LOTUS. just need format order compatible. example, prepared ways format closed, house libraries. need help formatting library like share us implemented, feel free contact us. running corresponding code, forget modify params/user/prepare_libraries_sop_closed.yaml. sub-libraries ready, merged single file used next steps. now recommend read next vignette.","code":"tima::get_example_files() tima::get_example_files(\"spectral_lib_with_rt\") tima::get_example_files(\"hmdb_is\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"your-own-files","dir":"Articles","previous_headings":"","what":"Your own files","title":"1 Gathering everything you need","text":"provide files main menu. tutorial, use example files can get running:","code":"tima::get_example_files()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"1 Gathering everything you need","text":"following paragraph describes libraries available default. first step, need spectral libraries perform MS2-based annotation. can course use experimental spectral library perform MS2 annotation. currently support spectral libraries MSP MGF format. get small example: MassBank downloaded used default. currently working get MONA GNPS experimental spectra easily available. However, programmatic download MONA currently supported, GNPS spectra require pre-processing. now, either use GNPS job ID download MONA manually, helpers use later already available. (see scripts/prepare_libraries_spectra_exp_mona.R). case want format spectral library use spectral matching, adapt steps params/user/prepare_libraries_spectra.yaml params/user/annotate_spectra.yaml. availability experimental spectra limited, can take advantage silico generated spectra. generated silico spectral library structures found Wikidata using CFM4. info, see https://doi.org/10.5281/zenodo.5607185. made available polarities. can also complement silico spectra HMDB (running default quite long): library optional. standard LC method shared (now) among laboratories, library heavily laboratory-dependent. also library silico predicted retention times. want prepare library, look params/user/prepare_libraries_rt.yaml. developed LOTUS1 Taxonomically Informed Metabolite Annotation mind, provide starting point structure-organism pairs library. process download LOTUS looks like : can see, one target seems outdated. reality, force search new version LOTUS exists time. newer version exists, fetch re-run needed steps accordingly. default, also complement LOTUS pairs ones coming ECMDB. ones coming HMDB. first steps, need change parameters implemented default. want tool flexible, can also add library LOTUS. just need format order compatible. example, prepared ways format closed, house libraries. need help formatting library like share us implemented, feel free contact us. running corresponding code, forget modify params/user/prepare_libraries_sop_closed.yaml. sub-libraries ready, merged single file used next steps. now recommend read next vignette.","code":"tima::get_example_files(\"spectral_lib_with_rt\") tima::get_example_files(\"hmdb_is\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"spectra","dir":"Articles","previous_headings":"","what":"Spectra","title":"1 Gathering everything you need","text":"first step, need spectral libraries perform MS2-based annotation. can course use experimental spectral library perform MS2 annotation. currently support spectral libraries MSP MGF format. get small example: MassBank downloaded used default. currently working get MONA GNPS experimental spectra easily available. However, programmatic download MONA currently supported, GNPS spectra require pre-processing. now, either use GNPS job ID download MONA manually, helpers use later already available. (see scripts/prepare_libraries_spectra_exp_mona.R). case want format spectral library use spectral matching, adapt steps params/user/prepare_libraries_spectra.yaml params/user/annotate_spectra.yaml. availability experimental spectra limited, can take advantage silico generated spectra.","code":"tima::get_example_files(\"spectral_lib_with_rt\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"experimental","dir":"Articles","previous_headings":"","what":"Experimental","title":"1 Gathering everything you need","text":"can course use experimental spectral library perform MS2 annotation. currently support spectral libraries MSP MGF format. get small example: MassBank downloaded used default. currently working get MONA GNPS experimental spectra easily available. However, programmatic download MONA currently supported, GNPS spectra require pre-processing. now, either use GNPS job ID download MONA manually, helpers use later already available. (see scripts/prepare_libraries_spectra_exp_mona.R). case want format spectral library use spectral matching, adapt steps params/user/prepare_libraries_spectra.yaml params/user/annotate_spectra.yaml.","code":"tima::get_example_files(\"spectral_lib_with_rt\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"massbank","dir":"Articles","previous_headings":"","what":"1 Gathering everything you need","title":"1 Gathering everything you need","text":"MassBank downloaded used default. currently working get MONA GNPS experimental spectra easily available. However, programmatic download MONA currently supported, GNPS spectra require pre-processing. now, either use GNPS job ID download MONA manually, helpers use later already available. (see scripts/prepare_libraries_spectra_exp_mona.R). case want format spectral library use spectral matching, adapt steps params/user/prepare_libraries_spectra.yaml params/user/annotate_spectra.yaml.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"in-silico","dir":"Articles","previous_headings":"","what":"In silico","title":"1 Gathering everything you need","text":"availability experimental spectra limited, can take advantage silico generated spectra.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"wikidata","dir":"Articles","previous_headings":"","what":"Wikidata","title":"1 Gathering everything you need","text":"generated silico spectral library structures found Wikidata using CFM4. info, see https://doi.org/10.5281/zenodo.5607185. made available polarities. can also complement silico spectra HMDB (running default quite long):","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"hmdb","dir":"Articles","previous_headings":"","what":"HMDB","title":"1 Gathering everything you need","text":"","code":"tima::get_example_files(\"hmdb_is\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"retention-times","dir":"Articles","previous_headings":"","what":"Retention times","title":"1 Gathering everything you need","text":"library optional. standard LC method shared (now) among laboratories, library heavily laboratory-dependent. also library silico predicted retention times. want prepare library, look params/user/prepare_libraries_rt.yaml.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"structure-organism-pairs","dir":"Articles","previous_headings":"","what":"Structure-Organism Pairs","title":"1 Gathering everything you need","text":"developed LOTUS1 Taxonomically Informed Metabolite Annotation mind, provide starting point structure-organism pairs library. process download LOTUS looks like : can see, one target seems outdated. reality, force search new version LOTUS exists time. newer version exists, fetch re-run needed steps accordingly. default, also complement LOTUS pairs ones coming ECMDB. ones coming HMDB. first steps, need change parameters implemented default. want tool flexible, can also add library LOTUS. just need format order compatible. example, prepared ways format closed, house libraries. need help formatting library like share us implemented, feel free contact us. running corresponding code, forget modify params/user/prepare_libraries_sop_closed.yaml. sub-libraries ready, merged single file used next steps. now recommend read next vignette.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"lotus","dir":"Articles","previous_headings":"","what":"LOTUS","title":"1 Gathering everything you need","text":"developed LOTUS1 Taxonomically Informed Metabolite Annotation mind, provide starting point structure-organism pairs library. process download LOTUS looks like : can see, one target seems outdated. reality, force search new version LOTUS exists time. newer version exists, fetch re-run needed steps accordingly.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"ecmdb","dir":"Articles","previous_headings":"","what":"ECMDB","title":"1 Gathering everything you need","text":"default, also complement LOTUS pairs ones coming ECMDB.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"hmdb-1","dir":"Articles","previous_headings":"","what":"HMDB","title":"1 Gathering everything you need","text":"ones coming HMDB. first steps, need change parameters implemented default.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"other-libraries","dir":"Articles","previous_headings":"","what":"Other libraries","title":"1 Gathering everything you need","text":"want tool flexible, can also add library LOTUS. just need format order compatible. example, prepared ways format closed, house libraries. need help formatting library like share us implemented, feel free contact us. running corresponding code, forget modify params/user/prepare_libraries_sop_closed.yaml.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/I-gathering.html","id":"merging","dir":"Articles","previous_headings":"","what":"Merging","title":"1 Gathering everything you need","text":"sub-libraries ready, merged single file used next steps. now recommend read next vignette.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"structural-annotations-of-your-features","dir":"Articles","previous_headings":"","what":"Structural annotations of your features","title":"2 Preparing inputs","text":"moment, support 3 different types annotations: Internal MS1 exact mass-based library search Internal MS2 library search (experimental silico) SIRIUS annotations lowest possible quality. However, allow annotate unusual adducts, -source fragments thanks different small tricks implemented. Try really restrict adduct list structure-organism pairs want consider possibilities explode rapidly. use spectral entropy https://doi.org/10.1038/s41592-021-01331-z matching. case, python implementation spectral matching steps also available : https://github.com/mandelbrot-project/spectral_lib_matcher. python version also includes similarity measures. SIRIUS jobs long perform, provide example SIRIUS workspaces (SIRIUS 5 6). Note spectral matches SIRIUS supported now. generated 20 first lines example MGF following command: parameters optimized used give example output. using cli, forget generate summaries --full-summary option, use gui, generate clicking corresponding icon. can get example running: sirius workspace ideally yourPattern_sirius name placed data/interim/annotations (else found default except provide right path). want know attempt combine CSI score ones, see R/transform_score_sirius_csi.R Note starting SIRIUS6, approx confidence score one considered, exact one. Annotations now prepared can used processing. features informed structural information also, chemical class information. latter might corresponding chemical class annotated structure, depending consistency annotations.","code":"# this is run on SIRIUS 6 sirius \\ --noCite \\ --input=data/source/example_spectra_mini.mgf \\ --output=data/interim/annotations/example_sirius.sirius/ \\ --maxmz=800 \\ config \\ --AlgorithmProfile=orbitrap \\ --StructureSearchDB=BIO \\ --Timeout.secondsPerTree=10 \\ --Timeout.secondsPerInstance=10 \\ formulas \\ zodiac \\ fingerprints \\ classes \\ structures \\ denovo-structures \\ summaries \\ --chemvista \\ --feature-quality-summary \\ --full-summary  # this is run on SIRIUS 5 sirius \\ --noCite \\ --input data/source/example_spectra_mini.mgf \\ --output data/interim/annotations/example_sirius/ \\ --maxmz 800 \\ config \\ --AlgorithmProfile orbitrap \\ --StructureSearchDB BIO \\ --Timeout.secondsPerTree 10 \\ --Timeout.secondsPerInstance 10 \\ formula \\ zodiac \\ fingerprint \\ structure \\ compound-classes \\ write-summaries \\ --full-summary tima:::get_example_sirius()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"ms1-based","dir":"Articles","previous_headings":"","what":"MS1-based","title":"2 Preparing inputs","text":"annotations lowest possible quality. However, allow annotate unusual adducts, -source fragments thanks different small tricks implemented. Try really restrict adduct list structure-organism pairs want consider possibilities explode rapidly.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"spectral","dir":"Articles","previous_headings":"","what":"Spectral","title":"2 Preparing inputs","text":"use spectral entropy https://doi.org/10.1038/s41592-021-01331-z matching. case, python implementation spectral matching steps also available : https://github.com/mandelbrot-project/spectral_lib_matcher. python version also includes similarity measures.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"fingerprint-based","dir":"Articles","previous_headings":"","what":"Fingerprint-based","title":"2 Preparing inputs","text":"SIRIUS jobs long perform, provide example SIRIUS workspaces (SIRIUS 5 6). Note spectral matches SIRIUS supported now. generated 20 first lines example MGF following command: parameters optimized used give example output. using cli, forget generate summaries --full-summary option, use gui, generate clicking corresponding icon. can get example running: sirius workspace ideally yourPattern_sirius name placed data/interim/annotations (else found default except provide right path). want know attempt combine CSI score ones, see R/transform_score_sirius_csi.R Note starting SIRIUS6, approx confidence score one considered, exact one. Annotations now prepared can used processing. features informed structural information also, chemical class information. latter might corresponding chemical class annotated structure, depending consistency annotations.","code":"# this is run on SIRIUS 6 sirius \\ --noCite \\ --input=data/source/example_spectra_mini.mgf \\ --output=data/interim/annotations/example_sirius.sirius/ \\ --maxmz=800 \\ config \\ --AlgorithmProfile=orbitrap \\ --StructureSearchDB=BIO \\ --Timeout.secondsPerTree=10 \\ --Timeout.secondsPerInstance=10 \\ formulas \\ zodiac \\ fingerprints \\ classes \\ structures \\ denovo-structures \\ summaries \\ --chemvista \\ --feature-quality-summary \\ --full-summary  # this is run on SIRIUS 5 sirius \\ --noCite \\ --input data/source/example_spectra_mini.mgf \\ --output data/interim/annotations/example_sirius/ \\ --maxmz 800 \\ config \\ --AlgorithmProfile orbitrap \\ --StructureSearchDB BIO \\ --Timeout.secondsPerTree 10 \\ --Timeout.secondsPerInstance 10 \\ formula \\ zodiac \\ fingerprint \\ structure \\ compound-classes \\ write-summaries \\ --full-summary tima:::get_example_sirius()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"sirius","dir":"Articles","previous_headings":"","what":"Sirius","title":"2 Preparing inputs","text":"SIRIUS jobs long perform, provide example SIRIUS workspaces (SIRIUS 5 6). Note spectral matches SIRIUS supported now. generated 20 first lines example MGF following command: parameters optimized used give example output. using cli, forget generate summaries --full-summary option, use gui, generate clicking corresponding icon. can get example running: sirius workspace ideally yourPattern_sirius name placed data/interim/annotations (else found default except provide right path). want know attempt combine CSI score ones, see R/transform_score_sirius_csi.R Note starting SIRIUS6, approx confidence score one considered, exact one. Annotations now prepared can used processing. features informed structural information also, chemical class information. latter might corresponding chemical class annotated structure, depending consistency annotations.","code":"# this is run on SIRIUS 6 sirius \\ --noCite \\ --input=data/source/example_spectra_mini.mgf \\ --output=data/interim/annotations/example_sirius.sirius/ \\ --maxmz=800 \\ config \\ --AlgorithmProfile=orbitrap \\ --StructureSearchDB=BIO \\ --Timeout.secondsPerTree=10 \\ --Timeout.secondsPerInstance=10 \\ formulas \\ zodiac \\ fingerprints \\ classes \\ structures \\ denovo-structures \\ summaries \\ --chemvista \\ --feature-quality-summary \\ --full-summary  # this is run on SIRIUS 5 sirius \\ --noCite \\ --input data/source/example_spectra_mini.mgf \\ --output data/interim/annotations/example_sirius/ \\ --maxmz 800 \\ config \\ --AlgorithmProfile orbitrap \\ --StructureSearchDB BIO \\ --Timeout.secondsPerTree 10 \\ --Timeout.secondsPerInstance 10 \\ formula \\ zodiac \\ fingerprint \\ structure \\ compound-classes \\ write-summaries \\ --full-summary tima:::get_example_sirius()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"chemical-class-annotation-of-your-features","dir":"Articles","previous_headings":"","what":"Chemical class annotation of your features","title":"2 Preparing inputs","text":"Within workflow, offer new way attribute chemical classes features. analog Network Annotation Propagation, uses edges network instead clusters. makes sense view, also recently illustrated CANOPUS. currently also working CANOPUS integration chemical class annotation implies way heavier computations want offer users fast solution. network generated process. edges created based spectral entropy similarity calculated spectra (see https://doi.org/10.1038/s41592-021-01331-z). needed, can get example minimal feature table look like running:","code":"tima::get_example_files(example = \"features\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"generating-a-network","dir":"Articles","previous_headings":"","what":"Generating a network","title":"2 Preparing inputs","text":"network generated process. edges created based spectral entropy similarity calculated spectra (see https://doi.org/10.1038/s41592-021-01331-z). needed, can get example minimal feature table look like running:","code":"tima::get_example_files(example = \"features\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"biological-source-annotation","dir":"Articles","previous_headings":"","what":"Biological source annotation","title":"2 Preparing inputs","text":"step allows attribute biological source information features. features come single extract, attribute biological source extract features. multiple extracts aligned, take n (according parameters) highest intensities aligned feature table attribute biological source corresponding extracts.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/II-preparing.html","id":"filter-annotations-based-on-retention-time","dir":"Articles","previous_headings":"","what":"Filter annotations (based on retention time)","title":"2 Preparing inputs","text":"step allows filter annotation tools used, based internal (experimental predicted) retention times library. optional. one, simply group annotations tools. almost ! See already steps accomplished! now recommend read next vignette.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/tima.html","id":"philosophy","dir":"Articles","previous_headings":"","what":"Philosophy","title":"General comments about the infrastructure","text":"main goals flexibility reproducibility. ensure flexibility, tried split process much tiny parts needed. can decide whether skip optional part, add processing, etc. tried cover use cases, course exhaustive. feel like something useful users missing, please fill issue. time using TIMA, probably wonder: “parameters used generate file?” … collaborator might ask share data parameters. Writing time might time-consuming really line modern computational approaches. Therefore, chose implement parameters steps (almost…) YAML files. human-readable can used batches. like YAML, parameters step can also given command line arguments. saved YAML able share. ensure optimal reproducibility avoiding re-computing endlessly steps change, decided build {targets} pipeline. step whole pipeline described next.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/tima.html","id":"flexibility","dir":"Articles","previous_headings":"","what":"Flexibility","title":"General comments about the infrastructure","text":"ensure flexibility, tried split process much tiny parts needed. can decide whether skip optional part, add processing, etc. tried cover use cases, course exhaustive. feel like something useful users missing, please fill issue.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/tima.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"General comments about the infrastructure","text":"time using TIMA, probably wonder: “parameters used generate file?” … collaborator might ask share data parameters. Writing time might time-consuming really line modern computational approaches. Therefore, chose implement parameters steps (almost…) YAML files. human-readable can used batches. like YAML, parameters step can also given command line arguments. saved YAML able share. ensure optimal reproducibility avoiding re-computing endlessly steps change, decided build {targets} pipeline. step whole pipeline described next.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/tima.html","id":"use","dir":"Articles","previous_headings":"","what":"Use","title":"General comments about the infrastructure","text":"step detailed related vignettes. coming steps admit already installed tima: now recommend read first vignette. feel like going steps, just 🚀: even need GUI ☠️: case just want change small parameters jobs, convenience function available:","code":"install.packages(   \"tima\",   repos = c(     \"https://taxonomicallyinformedannotation.r-universe.dev\",     \"https://bioc.r-universe.dev\",     \"https://cloud.r-project.org\"   ) ) tima::install() tima::get_example_files() tima::run_app() tima::tima_full() tima::change_params_small(   fil_pat = \"myExamplePattern\",   fil_fea_raw = \"myExampleDir/myExampleFeatures.csv\",   fil_met_raw = \"myExampleDir2SomeWhereElse/myOptionalMetadata.tsv\",   fil_sir_raw = \"myExampleDir3/myAwesomeSiriusProject.zip\",   fil_spe_raw = \"myBeautifulSpectra.mgf\",   ms_pol = \"pos\",   org_tax = \"Gentiana lutea\",   hig_con = TRUE,   summarize = FALSE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/articles/tima.html","id":"tldr","dir":"Articles","previous_headings":"","what":"tl;dr","title":"General comments about the infrastructure","text":"feel like going steps, just 🚀: even need GUI ☠️: case just want change small parameters jobs, convenience function available:","code":"tima::run_app() tima::tima_full() tima::change_params_small(   fil_pat = \"myExamplePattern\",   fil_fea_raw = \"myExampleDir/myExampleFeatures.csv\",   fil_met_raw = \"myExampleDir2SomeWhereElse/myOptionalMetadata.tsv\",   fil_sir_raw = \"myExampleDir3/myAwesomeSiriusProject.zip\",   fil_spe_raw = \"myBeautifulSpectra.mgf\",   ms_pol = \"pos\",   org_tax = \"Gentiana lutea\",   hig_con = TRUE,   summarize = FALSE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adriano Rutz. Author, maintainer. Pierre-Marie Allard. Contributor.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rutz , Allard P (2025). tima: Taxonomically Informed Metabolite Annotation. doi:10.5281/zenodo.5797920, R package, version 2.11.0. Adriano Rutz; Miwa Dounoue-Kubo; et al. (25 October 2019). Taxonomically Informed Scoring Enhances Confidence Natural Products Annotation. Frontiers Plant Science. 10: 1329. doi:10.3389/FPLS.2019.01329. issn:1664-462X. pmc:PMC6824209. pmid:1708947. qid:Q91218352.","code":"@Manual{,   title = {tima: Taxonomically Informed Metabolite Annotation},   author = {Adriano Rutz and Pierre-Marie Allard},   year = {2025},   note = {R package, version 2.11.0},   doi = {10.5281/zenodo.5797920}, } @Article{,   title = {Taxonomically Informed Scoring Enhances Confidence in Natural Products Annotation},   author = {Adriano Rutz and Miwa Dounoue-Kubo and Simon Ollivier and Jonathan Bisson and Mohsen Bagheri and Tongchai Saesong and Samad Nejad Ebrahimi and Kornkanok Ingkaninan and Jean-Luc Wolfender and Pierre-Marie Allard},   journal = {Frontiers in Plant Science},   year = {2019},   volume = {10},   url = {https://doi.org/10.3389/fpls.2019.01329},   language = {en},   keywords = {metabolite annotation, chemotaxonomy, scoring system, natural products, computational metabolomics, taxonomic distance, specialized metabolome},   doi = {10.3389/FPLS.2019.01329},   issn = {1664-462X},   pmc = {PMC6824209},   pmid = {1708947},   qid = {Q91218352}, }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"tima-","dir":"","previous_headings":"","what":"Taxonomically Informed Metabolite Annotation","title":"Taxonomically Informed Metabolite Annotation","text":"initial work available https://doi.org/10.3389/fpls.2019.01329, many improvements made since . workflow illustrated . repository contains everything needed perform Taxonomically Informed Metabolite Annotation.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Taxonomically Informed Metabolite Annotation","text":"minimally need: feature list (.csv) (see example features) spectral file corresponding feature list (.mgf) (see example spectra) biological source(s) sample(s) annotating (.csv) (see example metadata) (File optional single organism) Optionally, may want add: -house structure-organism pairs library (provide LOTUS starting point user) manual automated annotations (currently support annotations coming SIRIUS (limitations))","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Taxonomically Informed Metabolite Annotation","text":"package (yet) available CRAN, need install : , able install rest : Normally, everything need installed (tested ). reason, packages installed, try install manually. avoid issues, offer containerized version (see Docker). installed, ready go documentation, major steps detailed. case data ready, can obtain example data using: done, can open small GUI adapt parameters launch job: command open small app default browser.","code":"install.packages(   \"tima\",   repos = c(     \"https://taxonomicallyinformedannotation.r-universe.dev\",     \"https://bioc.r-universe.dev\",     \"https://cloud.r-project.org\"   ) ) tima::install() tima::get_example_files() tima::run_app()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"docker","dir":"","previous_headings":"Installation","what":"Docker","title":"Taxonomically Informed Metabolite Annotation","text":"container also available, together small compose file. Main commands :","code":"docker pull adafede/tima-r # docker build . -t adafede/tima-r docker run --user tima-user -v \"$(pwd)/.tima/data:/home/tima-user/.tima/data\" -p 3838:3838 adafede/tima-r Rscript -e \"tima::run_app()\" # docker run --user tima-user -v \"$(pwd)/.tima/data:/home/tima-user/.tima/data\" adafede/tima-r Rscript -e \"tima::tima_full()\""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"main-citations","dir":"","previous_headings":"","what":"Main Citations","title":"Taxonomically Informed Metabolite Annotation","text":"According steps used, please give credit authors tools/resources used.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"tima","dir":"","previous_headings":"Main Citations","what":"TIMA","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.3389/fpls.2019.01329 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5797920","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"lotus","dir":"","previous_headings":"Main Citations","what":"LOTUS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.7554/eLife.70780 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5794106","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"isdb","dir":"","previous_headings":"Main Citations","what":"ISDB","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1021/acs.analchem.5b04804 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5607185","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"gnps","dir":"","previous_headings":"Main Citations","what":"GNPS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1038/nbt.3597","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"sirius","dir":"","previous_headings":"Main Citations","what":"SIRIUS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1038/s41592-019-0344-8 CSI:FingerId: https://doi.org/10.1073/pnas.1509788112 ZODIAC: https://doi.org/10.1038/s42256-020-00234-6 CANOPUS: https://doi.org/10.1038/s41587-020-0740-8 COSMIC: https://doi.org/10.1038/s41587-021-01045-9","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"others","dir":"","previous_headings":"Main Citations","what":"Others","title":"Taxonomically Informed Metabolite Annotation","text":"RforMassSpectrometry packages suite: https://doi.org/10.3390/metabo12020173 ECMDB 2.0: https://doi.org/10.1093/nar/gkv1060 HMDB 5.0: https://doi.org/10.1093/nar/gkab1062 MassBank: https://doi.org/10.5281/zenodo.3378723 Merlin: https://doi.org/10.5281/zenodo.13911806 NPClassifier: https://doi.org/10.1021/acs.jnatprod.1c00399 ROTL: https://doi.org/10.1111/2041-210X.12593 Spectral entropy: https://doi.org/10.1038/s41592-021-01331-z","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Taxonomically Informed Metabolite Annotation","text":"See https://taxonomicallyinformedannotation.github.io/tima/CONTRIBUTING.html","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Taxonomically Informed Metabolite Annotation","text":"See https://taxonomicallyinformedannotation.github.io/tima/SUPPORT.html","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_masses.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate masses — annotate_masses","title":"Annotate masses — annotate_masses","text":"function annotates feature table based exact mass match. requires structural library, metadata, lists adducts, clusters, neutral losses considered. polarity pos neg retention time mass tolerances given. feature table expected pre-formatted.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_masses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate masses — annotate_masses","text":"","code":"annotate_masses(   features = get_params(step = \"annotate_masses\")$files$features$prepared,   output_annotations = get_params(step =     \"annotate_masses\")$files$annotations$prepared$structural$ms1,   output_edges = get_params(step = \"annotate_masses\")$files$networks$spectral$edges$raw,   name_source = get_params(step = \"annotate_masses\")$names$source,   name_target = get_params(step = \"annotate_masses\")$names$target,   library = get_params(step = \"annotate_masses\")$files$libraries$sop$merged$keys,   str_stereo = get_params(step =     \"annotate_masses\")$files$libraries$sop$merged$structures$stereo,   str_met = get_params(step =     \"annotate_masses\")$files$libraries$sop$merged$structures$metadata,   str_nam = get_params(step =     \"annotate_masses\")$files$libraries$sop$merged$structures$names,   str_tax_cla = get_params(step =     \"annotate_masses\")$files$libraries$sop$merged$structures$taxonomies$cla,   str_tax_npc = get_params(step =     \"annotate_masses\")$files$libraries$sop$merged$structures$taxonomies$npc,   adducts_list = get_params(step = \"annotate_masses\")$ms$adducts,   clusters_list = get_params(step = \"annotate_masses\")$ms$clusters,   neutral_losses_list = get_params(step = \"annotate_masses\")$ms$neutral_losses,   ms_mode = get_params(step = \"annotate_masses\")$ms$polarity,   tolerance_ppm = get_params(step = \"annotate_masses\")$ms$tolerances$mass$ppm$ms1,   tolerance_rt = get_params(step = \"annotate_masses\")$ms$tolerances$rt$adducts )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_masses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate masses — annotate_masses","text":"features Table containing previous annotation complement output_annotations Output mass based structural annotations output_edges Output mass based edges name_source Name source features column name_target Name target features column library Library containing keys str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy adducts_list List adducts used clusters_list List clusters used neutral_losses_list List neutral losses used ms_mode Ionization mode. Must 'pos' 'neg' tolerance_ppm Tolerance perform annotation. <= 20 ppm tolerance_rt Tolerance group adducts. <= 0.05 minutes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_masses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate masses — annotate_masses","text":"path files containing MS1 annotations edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_masses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate masses — annotate_masses","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" data_interim <- \"data/interim/\" dir <- paste0(github, repo) dir <- paste0(dir, data_interim) annotate_masses(   features = paste0(dir, \"features/example_features.tsv\"),   library = paste0(dir, \"libraries/sop/merged/keys.tsv\"),   str_stereo = paste0(dir, \"libraries/sop/merged/structures/stereo.tsv\"),   str_met = paste0(dir, \"libraries/sop/merged/structures/metadata.tsv\"),   str_nam = paste0(dir, \"libraries/sop/merged/structures/names.tsv\"),   str_tax_cla = paste0(dir, \"libraries/sop/merged/structures/taxonomies/classyfire.tsv\"),   str_tax_npc = paste0(dir, \"libraries/sop/merged/structures/taxonomies/npc.tsv\") ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate spectra — annotate_spectra","title":"Annotate spectra — annotate_spectra","text":"function annotates spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate spectra — annotate_spectra","text":"","code":"annotate_spectra(   input = get_params(step = \"annotate_spectra\")$files$spectral$raw,   libraries = get_params(step = \"annotate_spectra\")$files$libraries$spectral,   polarity = get_params(step = \"annotate_spectra\")$ms$polarity,   output = get_params(step = \"annotate_spectra\")$files$annotations$raw$spectral$spectral,   method = get_params(step = \"annotate_spectra\")$similarities$methods$annotations,   threshold = get_params(step = \"annotate_spectra\")$similarities$thresholds$annotations,   ppm = get_params(step = \"annotate_spectra\")$ms$tolerances$mass$ppm$ms2,   dalton = get_params(step = \"annotate_spectra\")$ms$tolerances$mass$dalton$ms2,   qutoff = get_params(step = \"annotate_spectra\")$ms$thresholds$ms2$intensity,   approx = get_params(step = \"annotate_spectra\")$annotations$ms2approx )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate spectra — annotate_spectra","text":"input Query file containing spectra. Currently '.mgf' file libraries Libraries containing spectra match . Can '.mgf' '.sqlite' (Spectra formatted) polarity MS polarity. Must 'pos' 'neg'. output Output file. method Similarity method threshold Minimal similarity report ppm Relative ppm tolerance used dalton Absolute Dalton tolerance used qutoff Intensity ms2 fragments removed. approx Perform matching without precursor match","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate spectra — annotate_spectra","text":"takes two files input. query file matched library file.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/annotate_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate spectra — annotate_spectra","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() get_file(   url = get_default_paths()$urls$examples$spectra_mini,   export = get_params(step = \"annotate_spectra\")$files$spectral$raw ) get_file(   url = get_default_paths()$urls$examples$spectral_lib_mini$with_rt,   export = get_default_paths()$data$source$libraries$spectra$exp$with_rt ) annotate_spectra(   libraries = get_default_paths()$data$source$libraries$spectra$exp$with_rt ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark taxize spectra — benchmark_taxize_spectra","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"function adds taxa benchmark","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"","code":"benchmark_taxize_spectra(input, keys, org_tax_ott, output)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"input Initial features keys SOP keys org_tax_ott Taxonomy output Prepared features","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"path taxed benchmark","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"still quite dirty","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/benchmark_taxize_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmark taxize spectra — benchmark_taxize_spectra","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_entropy_and_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate entropy score — calculate_entropy_and_similarity","title":"Calculate entropy score — calculate_entropy_and_similarity","text":"function applies similarity calculation list spectra obtain entropy scores","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_entropy_and_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate entropy score — calculate_entropy_and_similarity","text":"","code":"calculate_entropy_and_similarity(   lib_ids,   lib_precursors,   lib_spectra,   query_ids,   query_precursors,   query_spectra,   method,   dalton,   ppm,   threshold,   approx )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_entropy_and_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate entropy score — calculate_entropy_and_similarity","text":"lib_ids Lib Ids lib_precursors Lib precursors lib_spectra Lib spectra query_ids Query Ids query_precursors Query precursors query_spectra Query spectra method Method dalton Dalton ppm Ppm threshold Threshold approx Approx","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_entropy_and_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate entropy score — calculate_entropy_and_similarity","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_mass_of_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mass of M — calculate_mass_of_m","title":"Calculate mass of M — calculate_mass_of_m","text":"function calculates mass M","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_mass_of_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mass of M — calculate_mass_of_m","text":"","code":"calculate_mass_of_m(adduct_string, mz, electron_mass = 0.0005485799)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_mass_of_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mass of M — calculate_mass_of_m","text":"adduct_string Adduct parsed mz mz electron_mass Electron mass","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_mass_of_m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mass of M — calculate_mass_of_m","text":"mass","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_mass_of_m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mass of M — calculate_mass_of_m","text":"","code":"calculate_mass_of_m(mz = 123.4567, adduct_string = \"[M+H]+\") #>    n_iso  #> 122.4483  calculate_mass_of_m(mz = 123.4567, adduct_string = \"[M+Na]+\") #>    n_iso  #> 100.4664  calculate_mass_of_m(mz = 123.456, adduct_string = \"[2M1-C6H12O6 (hexose)+NaCl+H]2+\") #>    n_iso  #> 185.0039"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate similarity between spectra — calculate_similarity","title":"Calculate similarity between spectra — calculate_similarity","text":"Efficiently calculates similarity scores query target spectra using either entropy GNPS methods","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate similarity between spectra — calculate_similarity","text":"","code":"calculate_similarity(   method,   query_spectrum,   target_spectrum,   query_precursor,   target_precursor,   dalton,   ppm,   return_matched_peaks = FALSE,   ... )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate similarity between spectra — calculate_similarity","text":"method Method (\"entropy\" \"gnps\") query_spectrum Query spectrum matrix target_spectrum Target spectrum matrix query_precursor Query precursor target_precursor Target precursor dalton Dalton tolerance ppm PPM tolerance return_matched_peaks Return matched peaks. compatible 'entropy'. Default: FALSE ... documented now","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate similarity between spectra — calculate_similarity","text":"Similarity score NA_real_ calculation fails","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/calculate_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate similarity between spectra — calculate_similarity","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/change_params_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Change Params Small — change_params_small","title":"Change Params Small — change_params_small","text":"function helps changing convenience parameters.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/change_params_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change Params Small — change_params_small","text":"","code":"change_params_small(   fil_pat = NULL,   fil_fea_raw = NULL,   fil_met_raw = NULL,   fil_sir_raw = NULL,   fil_spe_raw = NULL,   ms_pol = NULL,   org_tax = NULL,   hig_con = NULL,   summarize = NULL )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/change_params_small.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change Params Small — change_params_small","text":"fil_pat pattern identifying whole job. can put whatever want. STRING fil_fea_raw path file containing features' intensities. Can generated mzmine, SLAW, SIRIUS. STRING fil_met_raw path file containing metadata. experiment contains single taxon, can provide instead. STRING fil_sir_raw directory containing sirius annotations. STRING fil_spe_raw path file containing features' spectra. Can contain MS1 /MS2 spectra. STRING ms_pol polarity used. Must either \"pos\" \"neg\". STRING org_tax experiment contains single taxon, scientific name. \"Homo sapiens\". STRING hig_con Filter high confidence candidates . BOOLEAN summarize Summarize candidates per feature single row. BOOLEAN","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/change_params_small.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change Params Small — change_params_small","text":"YAML file changed parameters.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/change_params_small.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change Params Small — change_params_small","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() tima::change_params_small(   fil_pat = \"myExamplePattern\",   fil_fea_raw = \"myExampleDir/myExampleFeatures.csv\",   fil_met_raw = \"myExampleDir2SomeWhereElse/myOptionalMetadata.tsv\",   fil_sir_raw = \"myExampleDir3/myAwesomeSiriusProject.zip\",   fil_spe_raw = \"myBeautifulSpectra.mgf\",   ms_pol = \"pos\",   org_tax = \"Gentiana lutea\",   hig_con = TRUE,   summarize = FALSE ) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean bio — clean_bio","title":"Clean bio — clean_bio","text":"function cleans results obtained biological weighting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean bio — clean_bio","text":"","code":"clean_bio(   annot_table_wei_bio = get(\"annot_table_wei_bio\", envir = parent.frame()),   edges_table = get(\"edges_table\", envir = parent.frame()),   minimal_consistency = get(\"minimal_consistency\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean bio — clean_bio","text":"annot_table_wei_bio Table containing biologically weighted annotation edges_table Table containing edges features minimal_consistency Minimal consistency score class. FLOAT","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean bio — clean_bio","text":"table containing biologically weighted annotation given number initial candidates kept","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean bio — clean_bio","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_chemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean chemo — clean_chemo","title":"Clean chemo — clean_chemo","text":"function cleans results obtained chemical weighting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_chemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean chemo — clean_chemo","text":"","code":"clean_chemo(   annot_table_wei_chemo = get(\"annot_table_wei_chemo\", envir = parent.frame()),   components_table = get(\"components_table\", envir = parent.frame()),   features_table = get(\"features_table\", envir = parent.frame()),   structure_organism_pairs_table = get(\"structure_organism_pairs_table\", envir =     parent.frame()),   candidates_final = get(\"candidates_final\", envir = parent.frame()),   minimal_ms1_bio = get(\"minimal_ms1_bio\", envir = parent.frame()),   minimal_ms1_chemo = get(\"minimal_ms1_chemo\", envir = parent.frame()),   minimal_ms1_condition = get(\"minimal_ms1_condition\", envir = parent.frame()),   compounds_names = get(\"compounds_names\", envir = parent.frame()),   high_confidence = get(\"high_confidence\", envir = parent.frame()),   remove_ties = get(\"remove_ties\", envir = parent.frame()),   summarize = get(\"summarize\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_chemo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean chemo — clean_chemo","text":"annot_table_wei_chemo Table containing chemically weighted annotation components_table Prepared components file features_table Prepared features file structure_organism_pairs_table Table containing structure - organism pairs candidates_final Number final candidates keep minimal_ms1_bio Minimal biological score keep MS1 based annotation minimal_ms1_chemo Minimal chemical score keep MS1 based annotation minimal_ms1_condition Condition used. Must \"\" \"\". compounds_names Report compounds names. Can large. BOOLEAN high_confidence Report high confidence candidates . BOOLEAN remove_ties Remove ties. BOOLEAN summarize Boolean. summarize results (1 row per feature)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_chemo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean chemo — clean_chemo","text":"table containing chemically weighted annotation given number initial candidates kept","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_chemo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean chemo — clean_chemo","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean collapse — clean_collapse","title":"Clean collapse — clean_collapse","text":"function collapses grouped dataframe trims ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean collapse — clean_collapse","text":"","code":"clean_collapse(grouped_df, cols = NULL)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean collapse — clean_collapse","text":"grouped_df Grouped dataframe cols Column(s) apply collapse ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean collapse — clean_collapse","text":"Cleaned collapsed dataframe","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/clean_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean collapse — clean_collapse","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/columns_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Columns model — columns_model","title":"Columns model — columns_model","text":"function models columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/columns_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Columns model — columns_model","text":"","code":"columns_model()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/columns_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Columns model — columns_model","text":"columns model","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/columns_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Columns model — columns_model","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/complement_metadata_structures.html","id":null,"dir":"Reference","previous_headings":"","what":"Complement metadata of structures — complement_metadata_structures","title":"Complement metadata of structures — complement_metadata_structures","text":"function complement structural metadata","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/complement_metadata_structures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complement metadata of structures — complement_metadata_structures","text":"","code":"complement_metadata_structures(   df,   str_stereo = get(\"str_stereo\", envir = parent.frame()),   str_met = get(\"str_met\", envir = parent.frame()),   str_nam = get(\"str_nam\", envir = parent.frame()),   str_tax_cla = get(\"str_tax_cla\", envir = parent.frame()),   str_tax_npc = get(\"str_tax_npc\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/complement_metadata_structures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complement metadata of structures — complement_metadata_structures","text":"df Data frame structural metadata complemented str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/complement_metadata_structures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complement metadata of structures — complement_metadata_structures","text":"Data frame complemented structural metadata","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/complement_metadata_structures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complement metadata of structures — complement_metadata_structures","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/copy_backbone.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy backbone — copy_backbone","title":"Copy backbone — copy_backbone","text":"function copies backbone","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/copy_backbone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy backbone — copy_backbone","text":"","code":"copy_backbone(cache_dir = fs::path_home(\".tima\"), package = \"tima\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/copy_backbone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy backbone — copy_backbone","text":"cache_dir Cache directory package Package","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/copy_backbone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy backbone — copy_backbone","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Create components — create_components","title":"Create components — create_components","text":"function create components edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create components — create_components","text":"","code":"create_components(   input = get_params(step = \"create_components\")$files$networks$spectral$edges$prepared,   output = get_params(step = \"create_components\")$files$networks$spectral$components$raw )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create components — create_components","text":"input Input file(s) containing edges output Output file.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create components — create_components","text":"path created components","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create components — create_components","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" data_interim <- \"data/interim/\" dir <- paste0(github, repo) dir <- paste0(dir, data_interim) get_file(   url = paste0(dir, \"features/example_edges.tsv\"),   export = get_params(step = \"create_components\")$files$networks$spectral$edges$prepared ) create_components() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create directory — create_dir","title":"Create directory — create_dir","text":"function creates directory specified path already exist.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create directory — create_dir","text":"","code":"create_dir(export)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create directory — create_dir","text":"export Path directory created","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create directory — create_dir","text":"Message indicating status directory creation","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create directory — create_dir","text":"","code":"if (FALSE) { # \\dontrun{ create_dir(export = \"path/to/directory_of_file\") } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Create edges — create_edges","title":"Create edges — create_edges","text":"function applies similarity calculation list spectra create edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create edges — create_edges","text":"","code":"create_edges(   frags,   nspecs,   precs,   method,   ms2_tolerance,   ppm_tolerance,   threshold,   matched_peaks )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create edges — create_edges","text":"frags Fragments nspecs Number spectra precs Precursors method Method ms2_tolerance MS2 tolerance ppm_tolerance ppm tolerance threshold Threshold matched_peaks Matched peaks","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create edges — create_edges","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Create edges spectra — create_edges_spectra","title":"Create edges spectra — create_edges_spectra","text":"function create edges based fragmentation spectra similarity","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create edges spectra — create_edges_spectra","text":"","code":"create_edges_spectra(   input = get_params(step = \"create_edges_spectra\")$files$spectral$raw,   output = get_params(step = \"create_edges_spectra\")$files$networks$spectral$edges$raw,   name_source = get_params(step = \"create_edges_spectra\")$names$source,   name_target = get_params(step = \"create_edges_spectra\")$names$target,   method = get_params(step = \"create_edges_spectra\")$similarities$methods$edges,   threshold = get_params(step = \"create_edges_spectra\")$similarities$thresholds$edges,   matched_peaks = get_params(step =     \"create_edges_spectra\")$similarities$thresholds$matched_peaks,   ppm = get_params(step = \"create_edges_spectra\")$ms$tolerances$mass$ppm$ms2,   dalton = get_params(step = \"create_edges_spectra\")$ms$tolerances$mass$dalton$ms2,   qutoff = get_params(step = \"create_edges_spectra\")$ms$thresholds$ms2$intensity )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create edges spectra — create_edges_spectra","text":"input Query file containing spectra. Currently '.mgf' file output Output file. name_source Name source features column name_target Name target features column method Similarity method threshold Minimal similarity report matched_peaks Minimal number matched peaks ppm Relative ppm tolerance used dalton Absolute Dalton tolerance used qutoff Intensity ms2 fragments removed.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create edges spectra — create_edges_spectra","text":"path created spectral edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/create_edges_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create edges spectra — create_edges_spectra","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() get_file(   url = get_default_paths()$urls$examples$spectra_mini,   export = get_params(step = \"create_edges_spectra\")$files$spectral$raw ) create_edges_spectra() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate bio — decorate_bio","title":"Decorate bio — decorate_bio","text":"function outputs information biological weighting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate bio — decorate_bio","text":"","code":"decorate_bio(   annot_table_wei_bio = get(\"annot_table_wei_bio\", envir = parent.frame()),   score_biological_kingdom = get(\"score_biological_kingdom\", envir = parent.frame()),   score_biological_phylum = get(\"score_biological_phylum\", envir = parent.frame()),   score_biological_class = get(\"score_biological_class\", envir = parent.frame()),   score_biological_order = get(\"score_biological_order\", envir = parent.frame()),   score_biological_family = get(\"score_biological_family\", envir = parent.frame()),   score_biological_tribe = get(\"score_biological_tribe\", envir = parent.frame()),   score_biological_genus = get(\"score_biological_genus\", envir = parent.frame()),   score_biological_species = get(\"score_biological_species\", envir = parent.frame()),   score_biological_variety = get(\"score_biological_variety\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate bio — decorate_bio","text":"annot_table_wei_bio Table decorate score_biological_kingdom Kingdom score score_biological_phylum Phylum score score_biological_class Class score score_biological_order Order score score_biological_family Family score score_biological_tribe Tribe score score_biological_genus Genus score score_biological_species Species score score_biological_variety Variety score","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorate bio — decorate_bio","text":"Message indicating number annotations weighted biological level","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate bio — decorate_bio","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_chemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate chemo — decorate_chemo","title":"Decorate chemo — decorate_chemo","text":"function outputs information chemical weighting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_chemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate chemo — decorate_chemo","text":"","code":"decorate_chemo(   annot_table_wei_chemo = get(\"annot_table_wei_chemo\", envir = parent.frame()),   score_chemical_cla_kingdom = get(\"score_chemical_cla_kingdom\", envir = parent.frame()),   score_chemical_cla_superclass = get(\"score_chemical_cla_superclass\", envir =     parent.frame()),   score_chemical_cla_class = get(\"score_chemical_cla_class\", envir = parent.frame()),   score_chemical_cla_parent = get(\"score_chemical_cla_parent\", envir = parent.frame()),   score_chemical_npc_pathway = get(\"score_chemical_npc_pathway\", envir = parent.frame()),   score_chemical_npc_superclass = get(\"score_chemical_npc_superclass\", envir =     parent.frame()),   score_chemical_npc_class = get(\"score_chemical_npc_class\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_chemo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate chemo — decorate_chemo","text":"annot_table_wei_chemo Table decorate score_chemical_cla_kingdom Classyfire kingdom score score_chemical_cla_superclass Classyfire superclass score score_chemical_cla_class Classyfire class score score_chemical_cla_parent Classyfire parent score score_chemical_npc_pathway NPC pathway score score_chemical_npc_superclass NPC superclass score score_chemical_npc_class NPC class score","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_chemo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorate chemo — decorate_chemo","text":"Message indicating number annotations weighted chemical level","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_chemo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate chemo — decorate_chemo","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_masses.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate masses — decorate_masses","title":"Decorate masses — decorate_masses","text":"function outputs information MS1 annotation","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_masses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate masses — decorate_masses","text":"","code":"decorate_masses(   annotation_table_ms1 = get(\"annotation_table_ms1\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_masses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate masses — decorate_masses","text":"annotation_table_ms1 Table decorate","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_masses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorate masses — decorate_masses","text":"Message indicating number annotations obtained MS1","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/decorate_masses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate masses — decorate_masses","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance between two elements in a distance matrix — dist_get","title":"Distance between two elements in a distance matrix — dist_get","text":"function calculates distance two elements distance matrix","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance between two elements in a distance matrix — dist_get","text":"","code":"dist_get(d, idx1, idx2)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance between two elements in a distance matrix — dist_get","text":"d Distance matrix idx1 Index first element idx2 Index second element","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance between two elements in a distance matrix — dist_get","text":"Distance two elements","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance between two elements in a distance matrix — dist_get","text":"Credit goes usedist package","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance between two elements in a distance matrix — dist_get","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Dist groups — dist_groups","title":"Dist groups — dist_groups","text":"function gets distances per group","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dist groups — dist_groups","text":"","code":"dist_groups(d, g)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dist groups — dist_groups","text":"d distance object g grouping vector distance object","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dist groups — dist_groups","text":"data frame containing distance information pairs observations distance object, columns names indices observations, group labels observation, distance observations. label column indicates whether distance within group groups.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/dist_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dist groups — dist_groups","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Export output — export_output","title":"Export output — export_output","text":"function creates output directory exist exports data frame tab-delimited file.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export output — export_output","text":"","code":"export_output(x, file = output)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export output — export_output","text":"x data frame exported file path output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export output — export_output","text":"path exported file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export output — export_output","text":"","code":"if (FALSE) { # \\dontrun{ export_output(x = data.frame(), file = \"output/file.tsv\") unlink(\"output\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Export parameters — export_params","title":"Export parameters — export_params","text":"function writes parameters YAML file specified directory.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export parameters — export_params","text":"","code":"export_params(   parameters = get(\"parameters\", envir = parent.frame()),   directory = get_default_paths()$data$interim$params$path,   step )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export parameters — export_params","text":"parameters list parameters exported directory directory YAML file saved step step identifier included YAML file name","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export parameters — export_params","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_spectra_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Export spectra RDS — export_spectra_rds","title":"Export spectra RDS — export_spectra_rds","text":"function exports spectra RDS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_spectra_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export spectra RDS — export_spectra_rds","text":"","code":"export_spectra_rds(file, spectra)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_spectra_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export spectra RDS — export_spectra_rds","text":"file File spectra exported. spectra spectra object spectra stored","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/export_spectra_rds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export spectra RDS — export_spectra_rds","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/extract_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract spectra from a Spectra object — extract_spectra","title":"Extract spectra from a Spectra object — extract_spectra","text":"function extracts spectra Spectraobject","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/extract_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract spectra from a Spectra object — extract_spectra","text":"","code":"extract_spectra(object)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/extract_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract spectra from a Spectra object — extract_spectra","text":"object Object class Spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/extract_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract spectra from a Spectra object — extract_spectra","text":"Data frame containing spectra data","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/extract_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract spectra from a Spectra object — extract_spectra","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_annotations_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake annotations columns — fake_annotations_columns","title":"Fake annotations columns — fake_annotations_columns","text":"function fakes annotations columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_annotations_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake annotations columns — fake_annotations_columns","text":"","code":"fake_annotations_columns()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_annotations_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake annotations columns — fake_annotations_columns","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_ecmdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake ECMDB — fake_ecmdb","title":"Fake ECMDB — fake_ecmdb","text":"function fakes ECMDB case download failed","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_ecmdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake ECMDB — fake_ecmdb","text":"","code":"fake_ecmdb(export)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_ecmdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake ECMDB — fake_ecmdb","text":"export Path save file ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_ecmdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake ECMDB — fake_ecmdb","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_hmdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake HMDB — fake_hmdb","title":"Fake HMDB — fake_hmdb","text":"function fakes HMDB case download failed","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_hmdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake HMDB — fake_hmdb","text":"","code":"fake_hmdb(export)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_hmdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake HMDB — fake_hmdb","text":"export Path save file ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_hmdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake HMDB — fake_hmdb","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_lotus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake LOTUS — fake_lotus","title":"Fake LOTUS — fake_lotus","text":"function fakes LOTUS case download failed","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_lotus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake LOTUS — fake_lotus","text":"","code":"fake_lotus(export)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_lotus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake LOTUS — fake_lotus","text":"export Path save file ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_lotus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake LOTUS — fake_lotus","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_sop_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake SOP columns — fake_sop_columns","title":"Fake SOP columns — fake_sop_columns","text":"function fakes sop columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_sop_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake SOP columns — fake_sop_columns","text":"","code":"fake_sop_columns()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/fake_sop_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake SOP columns — fake_sop_columns","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter annotations — filter_annotations","title":"Filter annotations — filter_annotations","text":"function filters initial annotations.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter annotations — filter_annotations","text":"","code":"filter_annotations(   annotations = get_params(step =     \"filter_annotations\")$files$annotations$prepared$structural,   features = get_params(step = \"filter_annotations\")$files$features$prepared,   rts = get_params(step = \"filter_annotations\")$files$libraries$temporal$prepared,   output = get_params(step = \"filter_annotations\")$files$annotations$filtered,   tolerance_rt = get_params(step = \"filter_annotations\")$ms$tolerances$rt$library )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter annotations — filter_annotations","text":"annotations Prepared annotations file features Prepared features file rts Prepared retention time library output Output file tolerance_rt Tolerance filter retention time","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter annotations — filter_annotations","text":"path filtered annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter annotations — filter_annotations","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) annotations <- get_params(step = \"filter_annotations\")$files$annotations$prepared$structural[[2]] |>   gsub(     pattern = \".gz\",     replacement = \"\",     fixed = TRUE   ) features <- get_params(step = \"filter_annotations\")$files$features$prepared |>   gsub(     pattern = \".gz\",     replacement = \"\",     fixed = TRUE   ) rts <- get_params(step = \"filter_annotations\")$files$libraries$temporal$prepared |>   gsub(     pattern = \".gz\",     replacement = \"\",     fixed = TRUE   ) get_file(url = paste0(dir, annotations), export = annotations) get_file(url = paste0(dir, features), export = features) get_file(url = paste0(dir, rts), export = rts) filter_annotations(   annotations = annotations,   features = features,   rts = rts ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_high_confidence_only.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter high confidence only  — filter_high_confidence_only","title":"Filter high confidence only  — filter_high_confidence_only","text":"function filters highly confident annotations .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_high_confidence_only.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter high confidence only  — filter_high_confidence_only","text":"","code":"filter_high_confidence_only(   df,   score_bio_min = 0.85,   score_ini_min = 0.95,   score_final_min = 0.75,   error_rt_max = 0.1 )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_high_confidence_only.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter high confidence only  — filter_high_confidence_only","text":"df Dataframe score_bio_min Minimal biological score. Current default 0.85. score_ini_min Minimal initial score. Current default 0.95. score_final_min Minimal final score. Current default 0.75. error_rt_max Maximal RT error. Current default 0.1.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_high_confidence_only.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter high confidence only  — filter_high_confidence_only","text":"dataframe containing high confidence annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/filter_high_confidence_only.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter high confidence only  — filter_high_confidence_only","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_default_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default paths — get_default_paths","title":"Get default paths — get_default_paths","text":"function gets default paths","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_default_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default paths — get_default_paths","text":"","code":"get_default_paths(yaml = system.file(\"paths.yaml\", package = \"tima\"))"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_default_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default paths — get_default_paths","text":"yaml YAML file containing paths (default \"paths.yaml\")","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_default_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default paths — get_default_paths","text":"list containing paths specified YAML file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_default_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default paths — get_default_paths","text":"","code":"if (FALSE) { # \\dontrun{ get_default_paths() } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example files — get_example_files","title":"Get example files — get_example_files","text":"function downloads example files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example files — get_example_files","text":"","code":"get_example_files(   example = c(\"features\", \"metadata\", \"sirius\", \"spectra\"),   in_cache = TRUE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example files — get_example_files","text":"example example(s) want download in_cache Flag indicate storing files cache","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example files — get_example_files","text":"Example files.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example files — get_example_files","text":"","code":"if (FALSE) { # \\dontrun{ get_example_files(example = c(\"features\"), in_cache = FALSE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example sirius — get_example_sirius","title":"Get example sirius — get_example_sirius","text":"function gets example SIRIUS annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example sirius — get_example_sirius","text":"","code":"get_example_sirius(   url = get_default_paths()$urls$examples$sirius,   export = get_default_paths()$data$interim$annotations$example_sirius )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example sirius — get_example_sirius","text":"url URL example accessible export Path save example","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_example_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example sirius — get_example_sirius","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file — get_file","title":"Get file — get_file","text":"function get files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file — get_file","text":"","code":"get_file(url, export, limit = 3600)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file — get_file","text":"url URL file downloaded export File path file saved limit Timeout limit (seconds)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file — get_file","text":"path file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file — get_file","text":"","code":"if (FALSE) { # \\dontrun{ git <- \"https://github.com/\" org <- \"taxonomicallyinformedannotation\" repo <- \"tima-example-files\" branch <- \"main\" file <- \"example_metadata.tsv\" get_file(   url = paste(git, org, repo, \"raw\", branch, file, sep = \"/\"),   export = \"data/source/example_metadata.tsv\" ) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_gnps_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GNPS Tables — get_gnps_tables","title":"Get GNPS Tables — get_gnps_tables","text":"function gets GNPS tables corresponding job ID.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_gnps_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GNPS Tables — get_gnps_tables","text":"","code":"get_gnps_tables(   gnps_job_id,   gnps_job_example = get_default_paths()$gnps$example,   filename,   workflow = \"fbmn\",   path_features,   path_metadata,   path_spectra,   path_source = get_default_paths()$data$source$path,   path_interim_a = get_default_paths()$data$interim$annotations$path,   path_interim_f = get_default_paths()$data$interim$features$path )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_gnps_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GNPS Tables — get_gnps_tables","text":"gnps_job_id GNPS job ID gnps_job_example GNPS job example filename Name file workflow Character string indicating type workflow, either \"fbmn\" \"classical\" path_features Path features path_metadata Path metadata path_spectra Path spectra path_source Path store source files path_interim_a Path store interim annotations file path_interim_f Path store interim features files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_gnps_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GNPS Tables — get_gnps_tables","text":"downloaded GNPS tables","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_gnps_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GNPS Tables — get_gnps_tables","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get last version from Zenodo — get_last_version_from_zenodo","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"function gets last version file Zenodo record","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"","code":"get_last_version_from_zenodo(doi, pattern, path)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"doi DOI Zenodo record pattern Pattern identify file download path Path save file ","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"path file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"Credit goes partially https://inbo.github.io/inborutils/","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_last_version_from_zenodo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get last version from Zenodo — get_last_version_from_zenodo","text":"","code":"if (FALSE) { # \\dontrun{ get_last_version_from_zenodo(   doi = \"10.5281/zenodo.5794106\",   pattern = \"frozen.csv.gz\",   path = \"frozen.csv.gz\" ) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_organism_taxonomy_ott.html","id":null,"dir":"Reference","previous_headings":"","what":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","title":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","text":"function retrieves taxonomy Open Tree Life taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_organism_taxonomy_ott.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","text":"","code":"get_organism_taxonomy_ott(   df,   url = \"https://api.opentreeoflife.org/v3/taxonomy/about\",   retry = TRUE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_organism_taxonomy_ott.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","text":"df Dataframe containing organism(s) name(s) url url ott api (testing purposes) retry Boolean. Retry generic epithet","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_organism_taxonomy_ott.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","text":"path obtained OTT taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_organism_taxonomy_ott.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get organism taxonomy (Open Tree of Life Taxonomy) — get_organism_taxonomy_ott","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(\"organism\" = \"Homo sapiens\") get_organism_taxonomy_ott(df) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters — get_params","title":"Get parameters — get_params","text":"function gets parameters job. Combination cli yaml parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters — get_params","text":"","code":"get_params(step)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters — get_params","text":"step Name step performed","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters — get_params","text":"parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameters — get_params","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() get_params(\"prepare_params\") } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path — get_path","title":"Get path — get_path","text":"function gets path","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path — get_path","text":"","code":"get_path(base_path)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path — get_path","text":"base_path Base path","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path — get_path","text":"path","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path — get_path","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_spectra_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spectra ids — get_spectra_ids","title":"Get Spectra ids — get_spectra_ids","text":"function extracts spectra IDs yet consistently named","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_spectra_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spectra ids — get_spectra_ids","text":"","code":"get_spectra_ids(spectra)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_spectra_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spectra ids — get_spectra_ids","text":"spectra Spectra.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/get_spectra_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Spectra ids — get_spectra_ids","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/gnps_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for the C function ","title":"Wrapper for the C function ","text":"Wrapper C function \"gnps\"","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/gnps_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for the C function ","text":"","code":"gnps_wrapper(x, y)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/gnps_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for the C function ","text":"x numeric matrix. y numeric matrix.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/gnps_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for the C function ","text":"result C function.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/go_to_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Go to cache — go_to_cache","title":"Go to cache — go_to_cache","text":"function goes cache","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/go_to_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Go to cache — go_to_cache","text":"","code":"go_to_cache(dir = \".tima\")"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/go_to_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Go to cache — go_to_cache","text":"dir Directory","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/go_to_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Go to cache — go_to_cache","text":"Goes cache","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/go_to_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Go to cache — go_to_cache","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_adducts.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize adducts — harmonize_adducts","title":"Harmonize adducts — harmonize_adducts","text":"function annotates masses","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_adducts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize adducts — harmonize_adducts","text":"","code":"harmonize_adducts(df, adducts_colname = \"adduct\", adducts_translations)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_adducts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize adducts — harmonize_adducts","text":"df Dataframe adducts_colname Adducts colname adducts_translations Adducts translations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_adducts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize adducts — harmonize_adducts","text":"table harmonized adducts","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_adducts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize adducts — harmonize_adducts","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_names_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize names sirius — harmonize_names_sirius","title":"Harmonize names sirius — harmonize_names_sirius","text":"function harmonizes names Sirius outputs make compatible","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_names_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize names sirius — harmonize_names_sirius","text":"","code":"harmonize_names_sirius(x)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_names_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize names sirius — harmonize_names_sirius","text":"x Character string containing name","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_names_sirius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize names sirius — harmonize_names_sirius","text":"Character string name modified according rules specified function","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_names_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize names sirius — harmonize_names_sirius","text":"","code":"if (FALSE) { # \\dontrun{ harmonized_name <- harmonize_names_sirius(\"My_name\") } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize spectra — harmonize_spectra","title":"Harmonize spectra — harmonize_spectra","text":"function harmonizes spectra headers","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize spectra — harmonize_spectra","text":"","code":"harmonize_spectra(   spectra,   metad = get(\"metad\", envir = parent.frame()),   mode,   col_ad = get(\"col_ad\", envir = parent.frame()),   col_ce = get(\"col_ce\", envir = parent.frame()),   col_ci = get(\"col_ci\", envir = parent.frame()),   col_em = get(\"col_em\", envir = parent.frame()),   col_in = get(\"col_in\", envir = parent.frame()),   col_io = get(\"col_io\", envir = parent.frame()),   col_ik = get(\"col_ik\", envir = parent.frame()),   col_il = get(\"col_il\", envir = parent.frame()),   col_mf = get(\"col_mf\", envir = parent.frame()),   col_na = get(\"col_na\", envir = parent.frame()),   col_po = get(\"col_po\", envir = parent.frame()),   col_sm = get(\"col_sm\", envir = parent.frame()),   col_sn = get(\"col_sn\", envir = parent.frame()),   col_si = get(\"col_si\", envir = parent.frame()),   col_sp = get(\"col_sp\", envir = parent.frame()),   col_sy = get(\"col_sy\", envir = parent.frame()),   col_xl = get(\"col_xl\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize spectra — harmonize_spectra","text":"spectra Spectra object harmonized metad Metadata identify library mode MS ionization mode. Must contain 'pos' 'neg' col_ad Name adduct mgf col_ce Name collision energy mgf col_ci Name compound id mgf col_em Name exact mass mgf col_in Name InChI mgf col_io Name InChI without stereo mgf col_ik Name InChIKey mgf col_il Name InChIKey without stereo mgf col_mf Name molecular formula mgf col_na Name name mgf col_po Name polarity mgf col_sm Name SMILES mgf col_sn Name SMILES without stereo mgf col_si Name spectrum id mgf col_sp Name SPLASH mgf col_sy Name synonyms mgf col_xl Name xlogp mgf","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize spectra — harmonize_spectra","text":"harmonized spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/harmonize_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize spectra — harmonize_spectra","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/import_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Import spectra — import_spectra","title":"Import spectra — import_spectra","text":"function imports spectra file (.mgf .sqlite)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/import_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import spectra — import_spectra","text":"","code":"import_spectra(   file,   cutoff = 0,   dalton = 0.01,   polarity = NA,   ppm = 10,   sanitize = TRUE,   combine = TRUE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/import_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import spectra — import_spectra","text":"file File path spectrum file imported cutoff Absolute minimal intensity dalton Dalton tolerance polarity Polarity ppm PPM tolerance sanitize Flag indicating whether sanitize. Default TRUE combine Flag indicating whether combine Default TRUE","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/import_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import spectra — import_spectra","text":"Spectra object containing imported spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/import_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import spectra — import_spectra","text":"","code":"if (FALSE) { # \\dontrun{ get_file(   url = get_default_paths()$urls$examples$spectra_mini,   export = get_default_paths()$data$source$spectra ) import_spectra(file = get_default_paths()$data$source$spectra) import_spectra(   file = get_default_paths()$data$source$spectra,   sanitize = FALSE ) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install — install","title":"Install — install","text":"function runs required install","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install — install","text":"","code":"install(   package = \"tima\",   repos = c(\"https://taxonomicallyinformedannotation.r-universe.dev\",     \"https://bioc.r-universe.dev\", \"https://cloud.r-project.org\"),   dependencies = TRUE,   test = FALSE )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install — install","text":"package Package name repos Repositories install.packages dependencies Whether install dependencies test Whether retry source test install","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/install.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install — install","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/join_gnps_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for the C function ","title":"Wrapper for the C function ","text":"Wrapper C function \"join_gnps\"","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/join_gnps_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for the C function ","text":"","code":"join_gnps_wrapper(x, y, xPrecursorMz, yPrecursorMz, tolerance, ppm)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/join_gnps_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for the C function ","text":"x Numeric vector matrix query masses. y Numeric vector matrix target masses. xPrecursorMz Numeric vector precursor values queries. yPrecursorMz Numeric vector precursor values targets. tolerance Numeric value specifying tolerance daltons. ppm Numeric value specifying tolerance ppm.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/join_gnps_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for the C function ","text":"result returned C function \"join_gnps\".","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/load_yaml_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Load yaml files — load_yaml_files","title":"Load yaml files — load_yaml_files","text":"function load yaml files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/load_yaml_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load yaml files — load_yaml_files","text":"","code":"load_yaml_files()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/load_yaml_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load yaml files — load_yaml_files","text":"list loaded yaml files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/load_yaml_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load yaml files — load_yaml_files","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/minimize_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimize results — minimize_results","title":"Minimize results — minimize_results","text":"function minimizes results","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/minimize_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimize results — minimize_results","text":"","code":"minimize_results(   df,   features_table,   min_score_classes = 0.6,   min_score_compounds = 0.4,   best_percentile = 0.9 )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/minimize_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimize results — minimize_results","text":"df Dataframe features_table Prepared features file min_score_classes Minimal score keep classes min_score_compounds Minimal score keep compounds best_percentile Best percentile","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/minimize_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimize results — minimize_results","text":"minimized table","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/minimize_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimize results — minimize_results","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_adduct.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse adduct — parse_adduct","title":"Parse adduct — parse_adduct","text":"function parses adducts","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_adduct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse adduct — parse_adduct","text":"","code":"parse_adduct(   adduct_string,   regex = \"\\\\[(\\\\d*)M(?![a-z])(\\\\d*)([+-][\\\\w\\\\d].*)?.*\\\\](\\\\d*)([+-])?\" )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_adduct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse adduct — parse_adduct","text":"adduct_string Adduct parsed regex Regex used parsing","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_adduct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse adduct — parse_adduct","text":"Parsed elements adduct","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_adduct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse adduct — parse_adduct","text":"","code":"if (FALSE) { # \\dontrun{ parse_adduct(\"[M+H]+\") parse_adduct(\"[2M1-C6H12O6 (hexose)+NaCl+H]2+\") } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_cli_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse CLI parameters — parse_cli_params","title":"Parse CLI parameters — parse_cli_params","text":"function parses command line parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_cli_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse CLI parameters — parse_cli_params","text":"","code":"parse_cli_params(arguments, parameters)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_cli_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse CLI parameters — parse_cli_params","text":"arguments CLI arguments parameters Parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_cli_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse CLI parameters — parse_cli_params","text":"Parameters coming CLI","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_cli_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse CLI parameters — parse_cli_params","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_yaml_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse YAML parameters — parse_yaml_params","title":"Parse YAML parameters — parse_yaml_params","text":"function parses YAML parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_yaml_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse YAML parameters — parse_yaml_params","text":"","code":"parse_yaml_params(   def = get(\"default_path\", envir = parent.frame()),   usr = get(\"user_path\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_yaml_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse YAML parameters — parse_yaml_params","text":"def Default path usr User path","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_yaml_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse YAML parameters — parse_yaml_params","text":"list containing parameters specified YAML files","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/parse_yaml_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse YAML parameters — parse_yaml_params","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/pre_harmonize_names_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre harmonize names sirius — pre_harmonize_names_sirius","title":"Pre harmonize names sirius — pre_harmonize_names_sirius","text":"function pre harmonizes Sirius names make compatible","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/pre_harmonize_names_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre harmonize names sirius — pre_harmonize_names_sirius","text":"","code":"pre_harmonize_names_sirius(x)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/pre_harmonize_names_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre harmonize names sirius — pre_harmonize_names_sirius","text":"x Character string containing name","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/pre_harmonize_names_sirius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre harmonize names sirius — pre_harmonize_names_sirius","text":"Character string name modified according rules specified function","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/pre_harmonize_names_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre harmonize names sirius — pre_harmonize_names_sirius","text":"","code":"if (FALSE) { # \\dontrun{ prepared_name <- pre_harmonize_names_sirius(\"My name/suffix\") } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_gnps.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare annotations GNPS — prepare_annotations_gnps","title":"Prepare annotations GNPS — prepare_annotations_gnps","text":"function prepares GNPS obtained annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_gnps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare annotations GNPS — prepare_annotations_gnps","text":"","code":"prepare_annotations_gnps(   input = get_params(step =     \"prepare_annotations_gnps\")$files$annotations$raw$spectral$gnps,   output = get_params(step =     \"prepare_annotations_gnps\")$files$annotations$prepared$structural$gnps,   str_stereo = get_params(step =     \"prepare_annotations_gnps\")$files$libraries$sop$merged$structures$stereo,   str_met = get_params(step =     \"prepare_annotations_gnps\")$files$libraries$sop$merged$structures$metadata,   str_nam = get_params(step =     \"prepare_annotations_gnps\")$files$libraries$sop$merged$structures$names,   str_tax_cla = get_params(step =     \"prepare_annotations_gnps\")$files$libraries$sop$merged$structures$taxonomies$cla,   str_tax_npc = get_params(step =     \"prepare_annotations_gnps\")$files$libraries$sop$merged$structures$taxonomies$npc )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_gnps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare annotations GNPS — prepare_annotations_gnps","text":"input Input file output Output file str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_gnps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare annotations GNPS — prepare_annotations_gnps","text":"path prepared GNPS annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_gnps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare annotations GNPS — prepare_annotations_gnps","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_annotations_gnps() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare annotations SIRIUS — prepare_annotations_sirius","title":"Prepare annotations SIRIUS — prepare_annotations_sirius","text":"function prepares Sirius results make compatible","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare annotations SIRIUS — prepare_annotations_sirius","text":"","code":"prepare_annotations_sirius(   input_directory = get_params(step =     \"prepare_annotations_sirius\")$files$annotations$raw$sirius,   output_ann = get_params(step =     \"prepare_annotations_sirius\")$files$annotations$prepared$structural$sirius,   output_can = get_params(step =     \"prepare_annotations_sirius\")$files$annotations$prepared$canopus,   output_for = get_params(step =     \"prepare_annotations_sirius\")$files$annotations$prepared$formula,   sirius_version = get_params(step = \"prepare_annotations_sirius\")$tools$sirius$version,   str_stereo = get_params(step =     \"prepare_annotations_sirius\")$files$libraries$sop$merged$structures$stereo,   str_met = get_params(step =     \"prepare_annotations_sirius\")$files$libraries$sop$merged$structures$metadata,   str_nam = get_params(step =     \"prepare_annotations_sirius\")$files$libraries$sop$merged$structures$names,   str_tax_cla = get_params(step =     \"prepare_annotations_sirius\")$files$libraries$sop$merged$structures$taxonomies$cla,   str_tax_npc = get_params(step =     \"prepare_annotations_sirius\")$files$libraries$sop$merged$structures$taxonomies$npc )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare annotations SIRIUS — prepare_annotations_sirius","text":"input_directory Directory containing Sirius results output_ann Output save prepared annotation results output_can Output save prepared canopus results output_for Output save prepared formula results sirius_version Sirius version str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_sirius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare annotations SIRIUS — prepare_annotations_sirius","text":"path prepared SIRIUS annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare annotations SIRIUS — prepare_annotations_sirius","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_annotations_sirius() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare annotations MS2 — prepare_annotations_spectra","title":"Prepare annotations MS2 — prepare_annotations_spectra","text":"function prepares spectral matches obtained previously make compatible","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare annotations MS2 — prepare_annotations_spectra","text":"","code":"prepare_annotations_spectra(   input = get_params(step =     \"prepare_annotations_spectra\")$files$annotations$raw$spectral$spectral,   output = get_params(step =     \"prepare_annotations_spectra\")$files$annotations$prepared$structural$spectral,   str_stereo = get_params(step =     \"prepare_annotations_spectra\")$files$libraries$sop$merged$structures$stereo,   str_met = get_params(step =     \"prepare_annotations_spectra\")$files$libraries$sop$merged$structures$metadata,   str_nam = get_params(step =     \"prepare_annotations_spectra\")$files$libraries$sop$merged$structures$names,   str_tax_cla = get_params(step =     \"prepare_annotations_spectra\")$files$libraries$sop$merged$structures$taxonomies$cla,   str_tax_npc = get_params(step =     \"prepare_annotations_spectra\")$files$libraries$sop$merged$structures$taxonomies$npc )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare annotations MS2 — prepare_annotations_spectra","text":"input Input file output Output file str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare annotations MS2 — prepare_annotations_spectra","text":"path prepared spectral annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_annotations_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare annotations MS2 — prepare_annotations_spectra","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" data_interim <- \"data/interim/\" dir <- paste0(github, repo) input <- get_params(step = \"prepare_annotations_spectra\")$files$annotations$raw$spectral$spectral |>   gsub(     pattern = \".tsv.gz\",     replacement = \"_pos.tsv\",     fixed = TRUE   ) get_file(url = paste0(dir, input), export = input) dir <- paste0(dir, data_interim) prepare_annotations_spectra(   input = input,   str_stereo = paste0(dir, \"libraries/sop/merged/structures/stereo.tsv\"),   str_met = paste0(dir, \"libraries/sop/merged/structures/metadata.tsv\"),   str_nam = paste0(dir, \"libraries/sop/merged/structures/names.tsv\"),   str_tax_cla = paste0(dir, \"libraries/sop/merged/structures/taxonomies/classyfire.tsv\"),   str_tax_npc = paste0(dir, \"libraries/sop/merged/structures/taxonomies/npc.tsv\") ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare features components — prepare_features_components","title":"Prepare features components — prepare_features_components","text":"function prepares components (clusters molecular network) use","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare features components — prepare_features_components","text":"","code":"prepare_features_components(   input = get_params(step =     \"prepare_features_components\")$files$networks$spectral$components$raw,   output = get_params(step =     \"prepare_features_components\")$files$networks$spectral$components$prepared )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare features components — prepare_features_components","text":"input Input file output Output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare features components — prepare_features_components","text":"path prepared features' components","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare features components — prepare_features_components","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) input <- get_params(step = \"prepare_features_components\")$files$networks$spectral$components$raw get_file(url = paste0(dir, input), export = input) prepare_features_components(   input = input ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare features edges — prepare_features_edges","title":"Prepare features edges — prepare_features_edges","text":"function prepares edges use","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare features edges — prepare_features_edges","text":"","code":"prepare_features_edges(   input = get_params(step = \"prepare_features_edges\")$files$networks$spectral$edges$raw,   output = get_params(step =     \"prepare_features_edges\")$files$networks$spectral$edges$prepared,   name_source = get_params(step = \"prepare_features_edges\")$names$source,   name_target = get_params(step = \"prepare_features_edges\")$names$target )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare features edges — prepare_features_edges","text":"input Input file 'manual' output Output file name_source Name source features column name_target Name target features column","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare features edges — prepare_features_edges","text":"path prepared edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare features edges — prepare_features_edges","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) input_1 <- get_params(step = \"prepare_features_edges\")$files$networks$spectral$edges$raw$ms1 input_2 <- get_params(step = \"prepare_features_edges\")$files$networks$spectral$edges$raw$spectral get_file(url = paste0(dir, input_1), export = input_1) get_file(url = paste0(dir, input_2), export = input_2) prepare_features_edges(   input = list(\"ms1\" = input_1, \"spectral\" = input_2) ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare features table — prepare_features_tables","title":"Prepare features table — prepare_features_tables","text":"function prepares features","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare features table — prepare_features_tables","text":"","code":"prepare_features_tables(   features = get_params(step = \"prepare_features_tables\")$files$features$raw,   output = get_params(step = \"prepare_features_tables\")$files$features$prepared,   candidates = get_params(step = \"prepare_features_tables\")$annotations$canidates$samples,   name_adduct = get_params(step = \"prepare_features_tables\")$names$adduct,   name_features = get_params(step = \"prepare_features_tables\")$names$features,   name_rt = get_params(step = \"prepare_features_tables\")$names$rt$features,   name_mz = get_params(step = \"prepare_features_tables\")$names$precursor )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare features table — prepare_features_tables","text":"features Path file containing features data output Path file export merged data candidates Number samples retained per feature top intensities name_adduct Name adduct column features data name_features Name features column features data name_rt Name retention time column features data name_mz Name m/z column features data","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare features table — prepare_features_tables","text":"path prepared feature table","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_features_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare features table — prepare_features_tables","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() get_file(   url = get_default_paths()$urls$examples$features,   export = get_params(step = \"prepare_features_tables\")$files$features$raw ) prepare_features_tables() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of retention times — prepare_libraries_rt","title":"Prepare libraries of retention times — prepare_libraries_rt","text":"function prepares retention times libraries used later","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of retention times — prepare_libraries_rt","text":"","code":"prepare_libraries_rt(   mgf_exp = get_params(step = \"prepare_libraries_rt\")$files$libraries$temporal$exp$mgf,   mgf_is = get_params(step = \"prepare_libraries_rt\")$files$libraries$temporal$is$mgf,   temp_exp = get_params(step = \"prepare_libraries_rt\")$files$libraries$temporal$exp$csv,   temp_is = get_params(step = \"prepare_libraries_rt\")$files$libraries$temporal$is$csv,   output_rt = get_params(step = \"prepare_libraries_rt\")$files$libraries$temporal$prepared,   output_sop = get_params(step = \"prepare_libraries_rt\")$files$libraries$sop$prepared$rt,   col_ik = get_params(step = \"prepare_libraries_rt\")$names$mgf$inchikey,   col_rt = get_params(step = \"prepare_libraries_rt\")$names$mgf$retention_time,   col_sm = get_params(step = \"prepare_libraries_rt\")$names$mgf$smiles,   name_inchikey = get_params(step = \"prepare_libraries_rt\")$names$inchikey,   name_rt = get_params(step = \"prepare_libraries_rt\")$names$rt$library,   name_smiles = get_params(step = \"prepare_libraries_rt\")$names$smiles,   unit_rt = get_params(step = \"prepare_libraries_rt\")$units$rt )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of retention times — prepare_libraries_rt","text":"mgf_exp MGF containing experimental retention times mgf_is MGF containing silico predicted retention times temp_exp File containing experimental retention times temp_is File containing silico predicted retention times output_rt Output retention time file output_sop Output pseudo sop file col_ik Name InChIKey mgf col_rt Name retention time mgf col_sm Name SMILES mgf name_inchikey Name InChIKey file name_rt Name retention time file name_smiles Name SMILES file unit_rt Unit retention time. Must \"seconds\" \"minutes\"","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of retention times — prepare_libraries_rt","text":"path prepared retention time library","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of retention times — prepare_libraries_rt","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_rt() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_closed.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","title":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","text":"Prepare libraries structure organism pairs CLOSED","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_closed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","text":"","code":"prepare_libraries_sop_closed(   input = get_params(step =     \"prepare_libraries_sop_closed\")$files$libraries$sop$raw$closed,   output = get_params(step =     \"prepare_libraries_sop_closed\")$files$libraries$sop$prepared$closed )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_closed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","text":"input Input file output Output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_closed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","text":"path prepared structure-organism pairs library CLOSED","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_closed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of structure organism pairs CLOSED — prepare_libraries_sop_closed","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_sop_closed() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_ecmdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","title":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","text":"Prepare libraries structure organism pairs ECMDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_ecmdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","text":"","code":"prepare_libraries_sop_ecmdb(   input = get_params(step = \"prepare_libraries_sop_ecmdb\")$files$libraries$sop$raw$ecmdb,   output = get_params(step =     \"prepare_libraries_sop_ecmdb\")$files$libraries$sop$prepared$ecmdb )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_ecmdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","text":"input Input file output Output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_ecmdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","text":"path prepared structure-organism pairs library ECMDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_ecmdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of structure organism pairs ECMDB — prepare_libraries_sop_ecmdb","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_sop_ecmdb() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_hmdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","title":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","text":"function prepares HMDB structure-organism pairs","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_hmdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","text":"","code":"prepare_libraries_sop_hmdb(   input = get_params(step = \"prepare_libraries_sop_hmdb\")$files$libraries$sop$raw$hmdb,   output = get_params(step =     \"prepare_libraries_sop_hmdb\")$files$libraries$sop$prepared$hmdb )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_hmdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","text":"input Input file output Output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_hmdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","text":"path prepared structure-organism pairs library HMDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_hmdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of structure organism pairs HMDB — prepare_libraries_sop_hmdb","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_sop_hmdb() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_lotus.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","title":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","text":"function prepares LOTUS structure-organism pairs","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_lotus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","text":"","code":"prepare_libraries_sop_lotus(   input = get_params(step = \"prepare_libraries_sop_lotus\")$files$libraries$sop$raw$lotus,   output = get_params(step =     \"prepare_libraries_sop_lotus\")$files$libraries$sop$prepared$lotus )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_lotus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","text":"input Input file output Output file","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_lotus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","text":"path prepared structure-organism pairs library LOTUS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_lotus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of structure organism pairs LOTUS — prepare_libraries_sop_lotus","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_sop_lotus() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"function prepares libraries made sub-libraries containing structure-organism pairs","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"","code":"prepare_libraries_sop_merged(   files = get_params(step = \"prepare_libraries_sop_merged\")$files$libraries$sop$prepared,   filter = get_params(step = \"prepare_libraries_sop_merged\")$organisms$filter$mode,   level = get_params(step = \"prepare_libraries_sop_merged\")$organisms$filter$level,   value = get_params(step = \"prepare_libraries_sop_merged\")$organisms$filter$value,   cache = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$processed,   output_key = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$keys,   output_org_tax_ott = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$organisms$taxonomies$ott,   output_str_stereo = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$stereo,   output_str_met = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$metadata,   output_str_nam = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$names,   output_str_tax_cla = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$taxonomies$cla,   output_str_tax_npc = get_params(step =     \"prepare_libraries_sop_merged\")$files$libraries$sop$merged$structures$taxonomies$npc )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"files List libraries merged filter Boolean. TRUE FALSE want filter library level Biological rank filtered. Kingdom, phylum, family, genus, ... value Name taxon taxa kept, e.g. 'Gentianaceae|Apocynaceae' cache Cache already processed SMILES located output_key Output file keys output_org_tax_ott Output file organisms taxonomy (OTT) output_str_stereo Output file structures stereo output_str_met Output file structures metadata output_str_nam Output file structures names output_str_tax_cla Output file structures taxonomy (Classyfire) output_str_tax_npc Output file structures taxonomy (NPC)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"path prepared structure-organism pairs library MERGED","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"can restricted specific taxa biologically meaningful annotation.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_sop_merged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare merged structure organism pairs libraries — prepare_libraries_sop_merged","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) files <- get_params(step = \"prepare_libraries_sop_merged\")$files$libraries$sop$prepared$lotus |>   gsub(     pattern = \".gz\",     replacement = \"\",     fixed = TRUE   ) get_file(url = paste0(dir, files), export = files) prepare_libraries_sop_merged(files = files) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare libraries of spectra — prepare_libraries_spectra","title":"Prepare libraries of spectra — prepare_libraries_spectra","text":"function prepares spectra used spectral matching","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare libraries of spectra — prepare_libraries_spectra","text":"","code":"prepare_libraries_spectra(   input = get_params(step = \"prepare_libraries_spectra\")$files$libraries$spectral$raw,   nam_lib = get_params(step = \"prepare_libraries_spectra\")$names$libraries,   col_ad = get_params(step = \"prepare_libraries_spectra\")$names$mgf$adduct,   col_ce = get_params(step = \"prepare_libraries_spectra\")$names$mgf$collision_energy,   col_ci = get_params(step = \"prepare_libraries_spectra\")$names$mgf$compound_id,   col_em = get_params(step = \"prepare_libraries_spectra\")$names$mgf$exact_mass,   col_in = get_params(step = \"prepare_libraries_spectra\")$names$mgf$inchi,   col_io = get_params(step = \"prepare_libraries_spectra\")$names$mgf$inchi_no_stereo,   col_ik = get_params(step = \"prepare_libraries_spectra\")$names$mgf$inchikey,   col_il = get_params(step =     \"prepare_libraries_spectra\")$names$mgf$inchikey_connectivity_layer,   col_mf = get_params(step = \"prepare_libraries_spectra\")$names$mgf$molecular_formula,   col_na = get_params(step = \"prepare_libraries_spectra\")$names$mgf$name,   col_po = get_params(step = \"prepare_libraries_spectra\")$names$mgf$polarity,   col_sm = get_params(step = \"prepare_libraries_spectra\")$names$mgf$smiles,   col_sn = get_params(step = \"prepare_libraries_spectra\")$names$mgf$smiles_no_stereo,   col_si = get_params(step = \"prepare_libraries_spectra\")$names$mgf$spectrum_id,   col_sp = get_params(step = \"prepare_libraries_spectra\")$names$mgf$splash,   col_sy = get_params(step = \"prepare_libraries_spectra\")$names$mgf$synonyms,   col_xl = get_params(step = \"prepare_libraries_spectra\")$names$mgf$xlogp )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare libraries of spectra — prepare_libraries_spectra","text":"input File containing spectra nam_lib Metadata identify library col_ad Name adduct mgf col_ce Name collision energy mgf col_ci Name compound id mgf col_em Name exact mass mgf col_in Name InChI mgf col_io Name InChI without stereo mgf col_ik Name InChIKey mgf col_il Name InChIKey without stereo mgf col_mf Name molecular formula mgf col_na Name name mgf col_po Name polarity mgf col_sm Name SMILES mgf col_sn Name SMILES without stereo mgf col_si Name spectrum id mgf col_sp Name SPLASH mgf col_sy Name synonyms mgf col_xl Name xlogp mgf polarity MS polarity","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare libraries of spectra — prepare_libraries_spectra","text":"path prepared spectral library","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_libraries_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare libraries of spectra — prepare_libraries_spectra","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() prepare_libraries_spectra() unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare params — prepare_params","title":"Prepare params — prepare_params","text":"function prepares main parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare params — prepare_params","text":"","code":"prepare_params(   params_small = get_params(step = \"prepare_params\"),   params_advanced = get_params(step = \"prepare_params_advanced\"),   step = NA )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare params — prepare_params","text":"params_small params_small params_advanced params_advanced step Step","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare params — prepare_params","text":"path yaml files containing prepared parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare params — prepare_params","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxa — prepare_taxa","title":"Prepare taxa — prepare_taxa","text":"function performs taxon name preparation match Open Tree Life taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxa — prepare_taxa","text":"","code":"prepare_taxa(   input = get_params(step = \"prepare_taxa\")$files$features$prepared,   extension = get_params(step = \"prepare_taxa\")$names$extension,   name_filename = get_params(step = \"prepare_taxa\")$names$filename,   colname = get_params(step = \"prepare_taxa\")$names$taxon,   metadata = get_params(step = \"prepare_taxa\")$files$metadata$raw,   org_tax_ott = get_params(step =     \"prepare_taxa\")$files$libraries$sop$merged$organisms$taxonomies$ott,   output = get_params(step = \"prepare_taxa\")$files$metadata$prepared,   taxon = get_params(step = \"prepare_taxa\")$organisms$taxon )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxa — prepare_taxa","text":"input File containing features intensities extension column names contain file extension? (mzmine mainly) name_filename Name file name column metadata file colname Name column containing biological source information metadata File containing metadata including biological source org_tax_ott File containing Open Tree Life Taxonomy output Output file taxon want enforce features given taxon, put name .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxa — prepare_taxa","text":"path prepared taxa","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare taxa — prepare_taxa","text":"Depending features aligned samples originating various organisms , can either attribute features single organism, attribute multiple ones, according relative intensities among samples.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/prepare_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare taxa — prepare_taxa","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) org_tax_ott <- paste0(   \"data/interim/libraries/\",   \"sop/merged/organisms/taxonomies/ott.tsv\" ) get_file(url = paste0(dir, org_tax_ott), export = org_tax_ott) get_file(   url = paste0(dir, \"data/interim/features/example_features.tsv\"),   export = get_params(step = \"prepare_taxa\")$files$features$prepared ) prepare_taxa(   taxon = \"Homo sapiens\",   org_tax_ott = org_tax_ott ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/process_smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Process SMILES — process_smiles","title":"Process SMILES — process_smiles","text":"function processes SMILES","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/process_smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process SMILES — process_smiles","text":"","code":"process_smiles(df, smiles_colname = \"structure_smiles_initial\", cache = NULL)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/process_smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process SMILES — process_smiles","text":"df Dataframe use smiles_colname Column name SMILES variable cache Cache already processed SMILES located","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/process_smiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process SMILES — process_smiles","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_from_sirius_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Read from SIRIUS zip — read_from_sirius_zip","title":"Read from SIRIUS zip — read_from_sirius_zip","text":"function reads files Sirius compressed workspace","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_from_sirius_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read from SIRIUS zip — read_from_sirius_zip","text":"","code":"read_from_sirius_zip(sirius_zip, file)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_from_sirius_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read from SIRIUS zip — read_from_sirius_zip","text":"sirius_zip Compressed directory containing Sirius results file File read","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_from_sirius_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read from SIRIUS zip — read_from_sirius_zip","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_mgf_opti.html","id":null,"dir":"Reference","previous_headings":"","what":"Read MGF opti — read_mgf_opti","title":"Read MGF opti — read_mgf_opti","text":"function reads Mascot Generic Format (MGF) file mimicking MsBackendMgf implementation using significantly lower memory, making suitable large MGF files.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_mgf_opti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read MGF opti — read_mgf_opti","text":"","code":"read_mgf_opti(   f,   msLevel = 2L,   mapping = Spectra::spectraVariableMapping(MsBackendMgf::MsBackendMgf()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_mgf_opti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read MGF opti — read_mgf_opti","text":"f character string specifying path single MGF file. msLevel integer specifying MS level. Default 2L. mapping named character vector mapping MGF fields standard spectra variables. Defaults Spectra::spectraVariableMapping(MsBackendMgf::MsBackendMgf()).","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_mgf_opti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read MGF opti — read_mgf_opti","text":"DataFrame containing parsed spectra data.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/read_mgf_opti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read MGF opti — read_mgf_opti","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/replace_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace ID in file paths — replace_id","title":"Replace ID in file paths — replace_id","text":"function replaces default ID example user-specified one","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/replace_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace ID in file paths — replace_id","text":"","code":"replace_id(   x,   user_filename = get_params(step = \"prepare_params\")$files$pattern,   user_gnps = get_params(step = \"prepare_params\")$gnps$id,   example_gnps = get_default_paths()$gnps$example )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/replace_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace ID in file paths — replace_id","text":"x character string containing default ID user_filename user-specified value file name job ID user_gnps user-specified value GNPS job ID example_gnps example value GNPS job ID","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/replace_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace ID in file paths — replace_id","text":"Character string GNPS job ID modified according rules specified function","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/replace_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace ID in file paths — replace_id","text":"","code":"if (FALSE) { # \\dontrun{ replace_id(   x = \"example/123456_features.tsv\",   user_gnps = NULL,   user_filename = \"Foo\" ) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/round_reals.html","id":null,"dir":"Reference","previous_headings":"","what":"Round reals — round_reals","title":"Round reals — round_reals","text":"function rounds reals columns dataframe","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/round_reals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round reals — round_reals","text":"","code":"round_reals(df, dig = 5L, cols = c(\"structure_exact_mass\", \"structure_xlogp\"))"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/round_reals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round reals — round_reals","text":"df Dataframe use dig Number digits cols Columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/round_reals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round reals — round_reals","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run app — run_app","title":"Run app — run_app","text":"function runs app","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run app — run_app","text":"","code":"run_app(host = \"127.0.0.1\", port = 3838, browser = TRUE)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run app — run_app","text":"host Host. Default 127.0.0.1 port Port. Default 3838 browser Flag browser use. Default TRUE","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run app — run_app","text":"Opens app","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run app — run_app","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/sanitize_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize spectra — sanitize_spectra","title":"Sanitize spectra — sanitize_spectra","text":"function sanitizes spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/sanitize_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize spectra — sanitize_spectra","text":"","code":"sanitize_spectra(spectra, cutoff = 0, dalton = 0.01, ppm = 10)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/sanitize_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize spectra — sanitize_spectra","text":"spectra Spectra object cutoff Absolute minimal intensity dalton Dalton tolerance ppm PPM tolerance","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/sanitize_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize spectra — sanitize_spectra","text":"sanitized spectra","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/sanitize_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitize spectra — sanitize_spectra","text":"","code":"if (FALSE) { # \\dontrun{ data.frame(   FEATURE_ID = c(\"FT001\", \"FT002\", \"FT003\"),   mz = c(list(123.4567, 234.5678, 345.6789)) ) |>   Spectra::Spectra() |>   sanitize_spectra() } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_annotations_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Select annotations columns — select_annotations_columns","title":"Select annotations columns — select_annotations_columns","text":"function selects annotations columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_annotations_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select annotations columns — select_annotations_columns","text":"","code":"select_annotations_columns(   df,   str_stereo = get(\"str_stereo\", envir = parent.frame()),   str_met = get(\"str_met\", envir = parent.frame()),   str_nam = get(\"str_nam\", envir = parent.frame()),   str_tax_cla = get(\"str_tax_cla\", envir = parent.frame()),   str_tax_npc = get(\"str_tax_npc\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_annotations_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select annotations columns — select_annotations_columns","text":"df Dataframe str_stereo File containing structures stereo str_met File containing structures metadata str_nam File containing structures names str_tax_cla File containing Classyfire taxonomy str_tax_npc File containing NPClassifier taxonomy","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_annotations_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select annotations columns — select_annotations_columns","text":"dataframe annotation columns selected","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_annotations_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select annotations columns — select_annotations_columns","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_canopus.html","id":null,"dir":"Reference","previous_headings":"","what":"Select sirius columns (canopus) — select_sirius_columns_canopus","title":"Select sirius columns (canopus) — select_sirius_columns_canopus","text":"function selects sirius columns (canopus)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_canopus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select sirius columns (canopus) — select_sirius_columns_canopus","text":"","code":"select_sirius_columns_canopus(df, sirius_version)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_canopus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select sirius columns (canopus) — select_sirius_columns_canopus","text":"df Dataframe sirius_version Sirius version","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_canopus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select sirius columns (canopus) — select_sirius_columns_canopus","text":"dataframe selected canopus columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_canopus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select sirius columns (canopus) — select_sirius_columns_canopus","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_formulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Select sirius columns (formulas) — select_sirius_columns_formulas","title":"Select sirius columns (formulas) — select_sirius_columns_formulas","text":"function selects sirius columns (formulas)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_formulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select sirius columns (formulas) — select_sirius_columns_formulas","text":"","code":"select_sirius_columns_formulas(df, sirius_version)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_formulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select sirius columns (formulas) — select_sirius_columns_formulas","text":"df Dataframe sirius_version Sirius version","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_formulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select sirius columns (formulas) — select_sirius_columns_formulas","text":"dataframe selected sirius columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_formulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select sirius columns (formulas) — select_sirius_columns_formulas","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_structures.html","id":null,"dir":"Reference","previous_headings":"","what":"Select sirius columns (structures) — select_sirius_columns_structures","title":"Select sirius columns (structures) — select_sirius_columns_structures","text":"function selects sirius columns (structures)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_structures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select sirius columns (structures) — select_sirius_columns_structures","text":"","code":"select_sirius_columns_structures(df, sirius_version)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_structures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select sirius columns (structures) — select_sirius_columns_structures","text":"df Dataframe sirius_version Sirius version","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_structures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select sirius columns (structures) — select_sirius_columns_structures","text":"dataframe selected structure columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sirius_columns_structures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select sirius columns (structures) — select_sirius_columns_structures","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sop_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Select SOP columns — select_sop_columns","title":"Select SOP columns — select_sop_columns","text":"function selects sop columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sop_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select SOP columns — select_sop_columns","text":"","code":"select_sop_columns(df)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sop_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select SOP columns — select_sop_columns","text":"df Dataframe","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sop_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select SOP columns — select_sop_columns","text":"dataframe selected structure organism pairs columns","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/select_sop_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select SOP columns — select_sop_columns","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/setup_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup logger — setup_logger","title":"Setup logger — setup_logger","text":"Setup logger","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/setup_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup logger — setup_logger","text":"","code":"setup_logger(filename)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/setup_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup logger — setup_logger","text":"filename Log file name. Default: \"tima.log\".","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/split_tables_sop.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Structure Organism Pairs table — split_tables_sop","title":"Split Structure Organism Pairs table — split_tables_sop","text":"function splits structure organism table.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/split_tables_sop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Structure Organism Pairs table — split_tables_sop","text":"","code":"split_tables_sop(table, cache)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/split_tables_sop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Structure Organism Pairs table — split_tables_sop","text":"table Table split cache Cache already processed SMILES located","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/split_tables_sop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Structure Organism Pairs table — split_tables_sop","text":"list tables structure organism pairs tables","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/split_tables_sop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Structure Organism Pairs table — split_tables_sop","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/summarize_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize results — summarize_results","title":"Summarize results — summarize_results","text":"function summarizes results","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/summarize_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize results — summarize_results","text":"","code":"summarize_results(   df,   features_table,   components_table,   structure_organism_pairs_table,   annot_table_wei_chemo,   remove_ties,   summarize )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/summarize_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize results — summarize_results","text":"df Dataframe features_table Prepared features file components_table Prepared components file structure_organism_pairs_table Table containing structure - organism pairs annot_table_wei_chemo Table containing chemically weighted annotation remove_ties Remove ties. BOOLEAN summarize Boolean. summarize results (1 row per feature)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/summarize_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize results — summarize_results","text":"summarized table","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/summarize_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize results — summarize_results","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tima: Taxonomically Informed Metabolite Annotation — tima-package","title":"tima: Taxonomically Informed Metabolite Annotation — tima-package","text":"package provides infrastructure perform Taxonomically Informed Metabolite Annotation.","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tima: Taxonomically Informed Metabolite Annotation — tima-package","text":"Maintainer: Adriano Rutz adafede@gmail.com (ORCID) contributors: Pierre-Marie Allard pierre-marie.allard@unifr.ch (ORCID) [contributor]","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Tima Full — tima_full","title":"Tima Full — tima_full","text":"function runs everything need.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tima Full — tima_full","text":"","code":"tima_full()"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima_full.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tima Full — tima_full","text":"Everything need.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/tima_full.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tima Full — tima_full","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/transform_score_sirius_csi.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform score sirius CSI — transform_score_sirius_csi","title":"Transform score sirius CSI — transform_score_sirius_csi","text":"function calculates mass M","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/transform_score_sirius_csi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform score sirius CSI — transform_score_sirius_csi","text":"","code":"transform_score_sirius_csi(csi_score, K = 50, scale = 10)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/transform_score_sirius_csi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform score sirius CSI — transform_score_sirius_csi","text":"csi_score Original CSI score K Shift scale Scale","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/transform_score_sirius_csi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform score sirius CSI — transform_score_sirius_csi","text":"mass","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/transform_score_sirius_csi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform score sirius CSI — transform_score_sirius_csi","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight annotations — weight_annotations","title":"Weight annotations — weight_annotations","text":"function weights annotations.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight annotations — weight_annotations","text":"","code":"weight_annotations(   library = get_params(step = \"weight_annotations\")$files$libraries$sop$merged$keys,   org_tax_ott = get_params(step =     \"weight_annotations\")$files$libraries$sop$merged$organisms$taxonomies$ott,   str_stereo = get_params(step =     \"weight_annotations\")$files$libraries$sop$merged$structures$stereo,   annotations = get_params(step = \"weight_annotations\")$files$annotations$filtered,   canopus = get_params(step = \"weight_annotations\")$files$annotations$prepared$canopus,   formula = get_params(step = \"weight_annotations\")$files$annotations$prepared$formula,   components = get_params(step =     \"weight_annotations\")$files$networks$spectral$components$prepared,   edges = get_params(step = \"weight_annotations\")$files$networks$spectral$edges$prepared,   taxa = get_params(step = \"weight_annotations\")$files$metadata$prepared,   output = get_params(step = \"weight_annotations\")$files$annotations$processed,   candidates_neighbors = get_params(step =     \"weight_annotations\")$annotations$candidates$neighbors,   candidates_final = get_params(step = \"weight_annotations\")$annotations$candidates$final,   weight_spectral = get_params(step = \"weight_annotations\")$weights$global$spectral,   weight_chemical = get_params(step = \"weight_annotations\")$weights$global$chemical,   weight_biological = get_params(step = \"weight_annotations\")$weights$global$biological,   score_biological_domain = get_params(step =     \"weight_annotations\")$weights$biological$domain,   score_biological_kingdom = get_params(step =     \"weight_annotations\")$weights$biological$kingdom,   score_biological_phylum = get_params(step =     \"weight_annotations\")$weights$biological$phylum,   score_biological_class = get_params(step =     \"weight_annotations\")$weights$biological$class,   score_biological_order = get_params(step =     \"weight_annotations\")$weights$biological$order,   score_biological_infraorder = get_params(step =     \"weight_annotations\")$weights$biological$infraorder,   score_biological_family = get_params(step =     \"weight_annotations\")$weights$biological$family,   score_biological_subfamily = get_params(step =     \"weight_annotations\")$weights$biological$subfamily,   score_biological_tribe = get_params(step =     \"weight_annotations\")$weights$biological$tribe,   score_biological_subtribe = get_params(step =     \"weight_annotations\")$weights$biological$subtribe,   score_biological_genus = get_params(step =     \"weight_annotations\")$weights$biological$genus,   score_biological_subgenus = get_params(step =     \"weight_annotations\")$weights$biological$subgenus,   score_biological_species = get_params(step =     \"weight_annotations\")$weights$biological$species,   score_biological_subspecies = get_params(step =     \"weight_annotations\")$weights$biological$subspecies,   score_biological_variety = get_params(step =     \"weight_annotations\")$weights$biological$variety,   score_chemical_cla_kingdom = get_params(step =     \"weight_annotations\")$weights$chemical$cla$kingdom,   score_chemical_cla_superclass = get_params(step =     \"weight_annotations\")$weights$chemical$cla$superclass,   score_chemical_cla_class = get_params(step =     \"weight_annotations\")$weights$chemical$cla$class,   score_chemical_cla_parent = get_params(step =     \"weight_annotations\")$weights$chemical$cla$parent,   score_chemical_npc_pathway = get_params(step =     \"weight_annotations\")$weights$chemical$npc$pathway,   score_chemical_npc_superclass = get_params(step =     \"weight_annotations\")$weights$chemical$npc$superclass,   score_chemical_npc_class = get_params(step =     \"weight_annotations\")$weights$chemical$npc$class,   minimal_consistency = get_params(step =     \"weight_annotations\")$annotations$thresholds$consistency,   minimal_ms1_bio = get_params(step =     \"weight_annotations\")$annotations$thresholds$ms1$biological,   minimal_ms1_chemo = get_params(step =     \"weight_annotations\")$annotations$thresholds$ms1$chemical,   minimal_ms1_condition = get_params(step =     \"weight_annotations\")$annotations$thresholds$ms1$condition,   ms1_only = get_params(step = \"weight_annotations\")$annotations$ms1only,   compounds_names = get_params(step = \"weight_annotations\")$options$compounds_names,   high_confidence = get_params(step = \"weight_annotations\")$options$high_confidence,   remove_ties = get_params(step = \"weight_annotations\")$options$remove_ties,   summarize = get_params(step = \"weight_annotations\")$options$summarize,   pattern = get_params(step = \"weight_annotations\")$files$pattern,   force = get_params(step = \"weight_annotations\")$options$force )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight annotations — weight_annotations","text":"library Library containing keys org_tax_ott File containing organisms taxonomy (OTT) str_stereo File containing structures stereo annotations Prepared annotations file canopus Prepared canopus file formula Prepared formula file components Prepared components file edges Prepared edges file taxa Prepared taxed features file output Output file candidates_neighbors Number neighbors candidates keep candidates_final Number final candidates keep weight_spectral Weight spectral score weight_chemical Weight biological score weight_biological Weight chemical consistency score score_biological_domain Score domain match (lower kingdom) score_biological_kingdom Score kingdom match (lower phylum) score_biological_phylum Score phylum match (lower class) score_biological_class Score class match (lower order) score_biological_order Score order match (lower infraorder) score_biological_infraorder Score infraorder match (lower order) score_biological_family Score family match (lower subfamily) score_biological_subfamily Score subfamily match (lower family) score_biological_tribe Score tribe match (lower subtribe) score_biological_subtribe Score subtribe match (lower genus) score_biological_genus Score genus match (lower subgenus) score_biological_subgenus Score subgenus match (lower species) score_biological_species Score species match (lower subspecies) score_biological_subspecies Score subspecies match (lower variety) score_biological_variety Score variety match (highest) score_chemical_cla_kingdom Score Classyfire kingdom match (lower  Classyfire superclass) score_chemical_cla_superclass Score Classyfire superclass match (lower Classyfire class) score_chemical_cla_class Score Classyfire class match (lower Classyfire parent) score_chemical_cla_parent Score Classyfire parent match (highest) score_chemical_npc_pathway Score NPC pathway match (lower  NPC superclass) score_chemical_npc_superclass Score NPC superclass match (lower NPC class) score_chemical_npc_class Score NPC class match (highest) minimal_consistency Minimal consistency score class. FLOAT minimal_ms1_bio Minimal biological score keep MS1 based annotation minimal_ms1_chemo Minimal chemical score keep MS1 based annotation minimal_ms1_condition Condition used. Must \"\" \"\". ms1_only Keep MS1 annotations. BOOLEAN compounds_names Report compounds names. Can large. BOOLEAN high_confidence Report high confidence candidates . BOOLEAN remove_ties Remove ties. BOOLEAN summarize Summarize results (1 row per feature). BOOLEAN pattern Pattern identify job. STRING force Force parameters. Use risk","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight annotations — weight_annotations","text":"path weighted annotations","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight annotations — weight_annotations","text":"","code":"if (FALSE) { # \\dontrun{ copy_backbone() go_to_cache() github <- \"https://raw.githubusercontent.com/\" repo <- \"taxonomicallyinformedannotation/tima-example-files/main/\" dir <- paste0(github, repo) library <- get_params(step = \"weight_annotations\")$files$libraries$sop$merged$keys |>   gsub(     pattern = \".gz\",     replacement = \"\",     fixed = TRUE   ) org_tax_ott <- paste0(   \"data/interim/libraries/\",   \"sop/merged/organisms/taxonomies/ott.tsv\" ) str_stereo <- paste0(   \"data/interim/libraries/\",   \"sop/merged/structures/stereo.tsv\" ) annotations <- paste0(   \"data/interim/annotations/\",   \"example_annotationsFiltered.tsv\" ) canopus <- paste0(   \"data/interim/annotations/\",   \"example_canopusPrepared.tsv\" ) formula <- paste0(   \"data/interim/annotations/\",   \"example_formulaPrepared.tsv\" ) components <- paste0(   \"data/interim/features/\",   \"example_componentsPrepared.tsv\" ) edges <- paste0(   \"data/interim/features/\",   \"example_edges.tsv\" ) taxa <- paste0(   \"data/interim/taxa/\",   \"example_taxed.tsv\" ) get_file(url = paste0(dir, library), export = library) get_file(url = paste0(dir, org_tax_ott), export = org_tax_ott) get_file(url = paste0(dir, str_stereo), export = str_stereo) get_file(url = paste0(dir, annotations), export = annotations) get_file(url = paste0(dir, canopus), export = canopus) get_file(url = paste0(dir, formula), export = formula) get_file(url = paste0(dir, components), export = components) get_file(url = paste0(dir, edges), export = edges) get_file(url = paste0(dir, taxa), export = taxa) weight_annotations(   library = library,   org_tax_ott = org_tax_ott,   str_stereo = str_stereo,   annotations = annotations,   canopus = canopus,   formula = formula,   components = components,   edges = edges,   taxa = taxa ) unlink(\"data\", recursive = TRUE) } # }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight bio — weight_bio","title":"Weight bio — weight_bio","text":"function weights eventually MS1 complemented annotations according biological source","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight bio — weight_bio","text":"","code":"weight_bio(   annotation_table_taxed = get(\"annotation_table_taxed\", envir = parent.frame()),   structure_organism_pairs_table = get(\"structure_organism_pairs_table\", envir =     parent.frame()),   weight_spectral = get(\"weight_spectral\", envir = parent.frame()),   weight_biological = get(\"weight_biological\", envir = parent.frame()),   score_biological_domain = get(\"score_biological_domain\", envir = parent.frame()),   score_biological_kingdom = get(\"score_biological_kingdom\", envir = parent.frame()),   score_biological_phylum = get(\"score_biological_phylum\", envir = parent.frame()),   score_biological_class = get(\"score_biological_class\", envir = parent.frame()),   score_biological_order = get(\"score_biological_order\", envir = parent.frame()),   score_biological_family = get(\"score_biological_family\", envir = parent.frame()),   score_biological_tribe = get(\"score_biological_tribe\", envir = parent.frame()),   score_biological_genus = get(\"score_biological_genus\", envir = parent.frame()),   score_biological_species = get(\"score_biological_species\", envir = parent.frame()),   score_biological_variety = get(\"score_biological_variety\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight bio — weight_bio","text":"annotation_table_taxed Table containing initial annotation eventually complemented additional MS1 annotations structure_organism_pairs_table Table containing structure - organism pairs weight_spectral Weight spectral score weight_biological Weight biological score score_biological_domain Score domain match (lower kingdom) score_biological_kingdom Score kingdom match (lower phylum) score_biological_phylum Score phylum match (lower class) score_biological_class Score class match (lower order) score_biological_order Score order match (lower family) score_biological_family Score family match (lower tribe) score_biological_tribe Score tribe match (lower genus) score_biological_genus Score genus match (lower species) score_biological_species Score species match (lower variety) score_biological_variety Score variety match (highest)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight bio — weight_bio","text":"table containing biologically weighted annotation","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight bio — weight_bio","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_chemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight chemo — weight_chemo","title":"Weight chemo — weight_chemo","text":"function weights biologically weighted annotations according chemical consistency","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_chemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight chemo — weight_chemo","text":"","code":"weight_chemo(   annot_table_wei_bio_clean = get(\"annot_table_wei_bio_clean\", envir = parent.frame()),   weight_spectral = get(\"weight_spectral\", envir = parent.frame()),   weight_biological = get(\"weight_biological\", envir = parent.frame()),   weight_chemical = get(\"weight_chemical\", envir = parent.frame()),   score_chemical_cla_kingdom = get(\"score_chemical_cla_kingdom\", envir = parent.frame()),   score_chemical_cla_superclass = get(\"score_chemical_cla_superclass\", envir =     parent.frame()),   score_chemical_cla_class = get(\"score_chemical_cla_class\", envir = parent.frame()),   score_chemical_cla_parent = get(\"score_chemical_cla_parent\", envir = parent.frame()),   score_chemical_npc_pathway = get(\"score_chemical_npc_pathway\", envir = parent.frame()),   score_chemical_npc_superclass = get(\"score_chemical_npc_superclass\", envir =     parent.frame()),   score_chemical_npc_class = get(\"score_chemical_npc_class\", envir = parent.frame()) )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_chemo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight chemo — weight_chemo","text":"annot_table_wei_bio_clean Table containing biologically weighted annotation weight_spectral Weight spectral score weight_biological Weight biological score weight_chemical Weight chemical consistency score score_chemical_cla_kingdom Score Classyfire kingdom match (lower  Classyfire superclass) score_chemical_cla_superclass Score Classyfire superclass match (lower Classyfire class) score_chemical_cla_class Score Classyfire class match (lower Classyfire parent) score_chemical_cla_parent Score Classyfire parent match (highest) score_chemical_npc_pathway Score pathway match (lower superclass) score_chemical_npc_superclass Score superclass match (lower class) score_chemical_npc_class Score class match (highest)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_chemo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight chemo — weight_chemo","text":"table containing chemically weighted annotation","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/reference/weight_chemo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight chemo — weight_chemo","text":"","code":"NULL #> NULL"},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-2120","dir":"Changelog","previous_headings":"","what":"tima 2.12.0","title":"tima 2.12.0","text":"Added minimal output Added parameter limit numbers neighbors used chemical consistency calculation (#193) Added MERLIN spectral libraries (#190) Added RDKit-based structures processing reticulate (#19) Breaking Change: .RDS spectra now stored efficiently. avoid errors, delete .RDS files created version 2.12.0 Externalized spectral libraries preparation SpectRalLibRaRies Introduced similarity method argument (entropy GNPS now) Implemented GNPS similarity method C Improved high confidence filtering Improved logs using logger (#189) Keep () best molecular formula canopus annotations SIRIUS New ISDB version 1 million compounds (see https://doi.org/10.5281/zenodo.14887271) Refactored MS1 annotation step work per sample (#194) Updated Massbank version 2025.05.1 Updated minimal R version 4.4.0 (related Bioconductor dependencies)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-2111-unreleased","dir":"Changelog","previous_headings":"","what":"tima 2.11.1 (unreleased)","title":"tima 2.11.1 (unreleased)","text":"Added SIRIUS feature tables support (#185) Added .rar compression support SIRIUS workspaces (#186)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-2110","dir":"Changelog","previous_headings":"","what":"tima 2.11.0","title":"tima 2.11.0","text":"Added convenience function change small parameters (#177) Added demo files download app Better packaging Improved documentation Fixed CRAN warnings Fixed edge cases spectra import Reduced dependencies Reduced exports Removed CompoundDb dependency causing many issues Removed pak install switched r-universe Replaced internal functions Spectra equivalents (#166) Shinylive version available https://taxonomicallyinformedannotation.github.io/tima-shinylive Simplified install vignettes Switched base::lapply purrr::map","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-2100","dir":"Changelog","previous_headings":"","what":"tima 2.10.0","title":"tima 2.10.0","text":"Added alt text vignettes Added possibility add internal libraries GUI (#159) Added possibility filter confident annotations (#140) Added number peaks spectrum Brought back older dependencies compatible oldrel Changed package name, usethis update Clearer handling SIRIUS scores (#146, #147) Exposed parameters GUI (#159) Facilitated install, need clone directory anymore Finally made r-universe Fixed adducts removed nitrogen rule Fixed number matched peaks Improved imports Reduced warnings Updated benchmarking steps","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-296","dir":"Changelog","previous_headings":"","what":"tima 2.9.6","title":"tima 2.9.6","text":"Added light-switch thanks pkgdown 2.1.0. Attempt simplify installation Fixed library/adducts confusion (#123) Fixed incorrect adduct differences annotations Refactored adducts / neutral losses / dimers annotation allow flexibility (#141, #144)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-295","dir":"Changelog","previous_headings":"","what":"tima 2.9.5","title":"tima 2.9.5","text":"re-package already latest version SIRIUS 6 default compatible (keeping SIRIUS 5 backward compatibility) Updated Massbank version 2024.06","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-294","dir":"Changelog","previous_headings":"","what":"tima 2.9.4","title":"tima 2.9.4","text":"Automated update Added option remove ties (#134) Added details SIRIUS, added manual workspace addition (#132) Additional preprocessing (reduction) noisy spectra Dependencies update Docker updates (#131) Handle cases (feature_id, mslevel) pairs present within MGF (#133) Improved documentation New working directory $HOME/.tima Updated R Bioconductor versions","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-293","dir":"Changelog","previous_headings":"","what":"tima 2.9.3","title":"tima 2.9.3","text":"Allowed SIRIUS jobs containing summaries Allowed underscores job pattern Changed default values (less stringent) Dependencies update Migrated app testing shinytest2 Removed inconsistent MS1 annotations Removed tests dependencies default","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-292","dir":"Changelog","previous_headings":"","what":"tima 2.9.2","title":"tima 2.9.2","text":"Added Nitrogen rule filter annotations Better handling partial downloads (#118) Dependencies update (mainly targets 1.5.1, invalidate previous targets) Fixed port issues Shiny (#122) Removed completely empty columns final output avoid confusion (#120)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-291","dir":"Changelog","previous_headings":"","what":"tima 2.9.1","title":"tima 2.9.1","text":"Added Waystation action Added structures spectral libraries SOP library (#113) Exposed parameters (#107, #108) Fixed Zenodo API HMDB structures support Optimized grep/gsub adding perl=TRUE fixed=TRUE Updated Massbank version 2023.11 Updated SIRIUS preparation (#74, #115)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-290","dir":"Changelog","previous_headings":"","what":"tima 2.9.0","title":"tima 2.9.0","text":"Added compounds names parameter Added MassBank spectral library (#77) Allowed files outside data/source (#89) Added RT library annotation library (#86) Better handling download errors Fixed Docker mount path Improved naming (#91) Internal variables refactoring Multiple Shiny fixes tests addition (#60) Multiple fixes (#71, #81, #82) New adducts (#79, #80) Refactored adducts, clusters neutral losses Refactored biological chemical score Refactored RT matching (#76) Refactored Sirius scores (#92) Removed GNPS dependency default","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-282","dir":"Changelog","previous_headings":"","what":"tima 2.8.2","title":"tima 2.8.2","text":"Added spectral entropy Added MS1 possibility Added Fluorine adduct Changed pbmclapply pblapply Documentation improvement Fixed empty chemical classes Fixed classified taxa GitHub Actions improvement renv removal Performance improvement replacing tidyverse fastverse (progress) Reduced warnings (CRAN jscpd)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-281","dir":"Changelog","previous_headings":"","what":"tima 2.8.1","title":"tima 2.8.1","text":"Adapted tests Added retry parameter get_organism_taxonomy_ott Dependencies update Minor fixes Moved /params paths.yaml /inst standard. (see https://r-pkgs.org/misc.html#-directories) Performance improvement replacing tidyverse fastverse (progress) Replaced extdata loading","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-280","dir":"Changelog","previous_headings":"","what":"tima 2.8.0","title":"tima 2.8.0","text":"Added GUI prototype Started using renv","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-274","dir":"Changelog","previous_headings":"","what":"tima 2.7.4","title":"tima 2.7.4","text":"Clearer vocabulary ECMDB support Edges (mass spectra-based) components generated present. Fixed case GNPS job ID Targets improvements Lot fixes Parameters refactoring Re-introduced Classyfire support. Retention time matching additionally MS2 RT present library Steps refactoring","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-273","dir":"Changelog","previous_headings":"","what":"tima 2.7.3","title":"tima 2.7.3","text":"Improved calculations redundant formulas Minor fixes Parameters refactoring Spectral matching update (see https://github.com/rformassspectrometry/MetaboAnnotation/issues/93) Targets implementation","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-272","dir":"Changelog","previous_headings":"","what":"tima 2.7.2","title":"tima 2.7.2","text":"Benchmark update (including negative mode) Improved parameters documentation Minor fixes Spectral comparison + intensity filtering update Switched r-base Docker image bioconductor ARM support","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-271","dir":"Changelog","previous_headings":"","what":"tima 2.7.1","title":"tima 2.7.1","text":"Added MONA helpers Added parallelization process_spectra Added sqlite storing spectra Improved code documentation Improved testing time Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-270","dir":"Changelog","previous_headings":"","what":"tima 2.7.0","title":"tima 2.7.0","text":"Added HMDB helpers taxo ISDB Added MS2 annotation capability (kudos @jorainer awesome Spectra suite) Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-260","dir":"Changelog","previous_headings":"","what":"tima 2.6.0","title":"tima 2.6.0","text":"Added Docker container Changed data architecture Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-256","dir":"Changelog","previous_headings":"","what":"tima 2.5.6","title":"tima 2.5.6","text":"Dependencies removal (e.g. metabo-store) Minor fixes Partial functions cleanup","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-255","dir":"Changelog","previous_headings":"","what":"tima 2.5.5","title":"tima 2.5.5","text":"Automation parameters improvement Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-254","dir":"Changelog","previous_headings":"","what":"tima 2.5.4","title":"tima 2.5.4","text":"Minor fixes Metadata completion improvement Molecular formula adducts formalism improvement","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-253","dir":"Changelog","previous_headings":"","what":"tima 2.5.3","title":"tima 2.5.3","text":"Imports improvements LOTUS update","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-252","dir":"Changelog","previous_headings":"","what":"tima 2.5.2","title":"tima 2.5.2","text":"Packaging improvements","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-251","dir":"Changelog","previous_headings":"","what":"tima 2.5.1","title":"tima 2.5.1","text":"Improved support SIRIUS (new summaries)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-250","dir":"Changelog","previous_headings":"","what":"tima 2.5.0","title":"tima 2.5.0","text":"LOTUS update Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-240","dir":"Changelog","previous_headings":"","what":"tima 2.4.0","title":"tima 2.4.0","text":"Added chemical names xlogp output (#33) Added support case consensus found (#30) Improved output (#34) Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-230","dir":"Changelog","previous_headings":"","what":"tima 2.3.0","title":"tima 2.3.0","text":"Added support annotation without MN (#28) Added support multi tool annotations (#27) Added support classical MN GNPS jobs (#25) Added support new version LOTUS General improvements manual inputs Improved tests code coverage Minor fixes Updated adducts","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-222","dir":"Changelog","previous_headings":"","what":"tima 2.2.2","title":"tima 2.2.2","text":"Additional benchmark figure (Candidates distribution) Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-221","dir":"Changelog","previous_headings":"","what":"tima 2.2.1","title":"tima 2.2.1","text":"Minor version name fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-220","dir":"Changelog","previous_headings":"","what":"tima 2.2.0","title":"tima 2.2.0","text":"Added benchmark () Various fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-210","dir":"Changelog","previous_headings":"","what":"tima 2.1.0","title":"tima 2.1.0","text":"Fixes, deletion binary dependencies.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima/news/index.html","id":"tima-200","dir":"Changelog","previous_headings":"","what":"tima 2.0.0","title":"tima 2.0.0","text":"Initial version.","code":""}]
